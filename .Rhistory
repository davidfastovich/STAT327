library("neotoma")
library("analogue")
library("rworldmap")
apple <- neotoma::get_site(sitename = 'Appleman%') #Finding site in Neotoma
appledata <- neotoma::get_download(apple) #Downloading data from Neotoma
appledatapollen <- appledata[[1]] #Pulling just pollen data into a separate data frame
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
applepollenpercent <- analogue::tran(x = appledatapollen$counts, method = "percent") #Transforming pollen counts from data matrix 2, $counts into percents
applepollenpercent <- applepollenpercent[, colMeans(applepollenpercent, na.rm = TRUE) > 2] #Getting rid of all percents less than 2
Stratiplot(x = applepollenpercent, y = appledata[[1]]$sample.meta$age, xlab = "Percent", ylab = "Years (ka)") #Plotting through stratiplot while referencing metadata age from the original download data
map <- getMap(resolution = "low")
plot(map)
points(apple$long, apple$lat, col = "blue")
apple <- neotoma::get_site(sitename = 'Appleman%') #Finding site in Neotoma
appledata <- neotoma::get_download(apple) #Downloading data from Neotoma
appledatapollen <- appledata[[1]] #Pulling just pollen data into a separate data frame
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
library("analogue")
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
library("neotoma")
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
applepollenpercent <- analogue::tran(x = appledatapollen$counts, method = "percent") #Transforming pollen counts from data matrix 2, $counts into percents
applepollenpercent$
View(applepollenpercent)
View(applepollenpercent)
applepollenpercent$fagus
applepollenpercent
fagus <- applepollenpercent[[9]]
fagus
fagus <- applepollenpercent[[10]]
str(applepollenpercent)
?is.data.frame()
?as.data.frame
x <- as.data.frame(applepollenpercent)
x$Fagus
?Stratiplot
View(x)
Stratiplot(x = x$Fagus)
str(x)
y <- as.table(applepollenpercent)
y
str(y)
y?as.data.frame()
?as.data.frame()
?as.data.table()
?as.table()
apple <- neotoma::get_site(sitename = 'Appleman%') #Finding site in Neotoma
appledata <- neotoma::get_download(apple) #Downloading data from Neotoma
appledatapollen <- appledata[[1]] #Pulling just pollen data into a separate data frame
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
applepollenpercent <- analogue::tran(x = appledatapollen$counts, method = "percent") #Transforming pollen counts from data matrix 2, $counts into percents
applepollenpercent <- applepollenpercent[, colMeans(applepollenpercent, na.rm = TRUE) > 2] #Getting rid of all percents less than 2
Stratiplot(x = applepollenpercent, y = appledata[[1]
apple <- neotoma::get_site(sitename = 'Appleman%') #Finding site in Neotoma
appledata <- neotoma::get_download(apple) #Downloading data from Neotoma
appledatapollen <- appledata[[1]] #Pulling just pollen data into a separate data frame
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
applepollenpercent <- analogue::tran(x = appledatapollen$counts, method = "percent") #Transforming pollen counts from data matrix 2, $counts into percents
applepollenpercent <- applepollenpercent[, colMeans(applepollenpercent, na.rm = TRUE) > 2] #Getting rid of all percents less than 2
Stratiplot(x = applepollenpercent, y = appledata[[1]]$sample.meta$age, xlab = "Percent", ylab = "Years
apple <- neotoma::get_site(sitename = 'Appleman%') #Finding site in Neotoma
appledata <- neotoma::get_download(apple) #Downloading data from Neotoma
appledatapollen <- appledata[[1]] #Pulling just pollen data into a separate data frame
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
applepollenpercent <- analogue::tran(x = appledatapollen$counts, method = "percent") #Transforming pollen counts from data matrix 2, $counts into percents
applepollenpercent <- applepollenpercent[, colMeans(applepollenpercent, na.rm = TRUE) > 2] #Getting rid of all percents less than 2
Stratiplot(x = applepollenpercent, y = appledata[[1]]$sample.meta$age, xlab = "Percent", ylab = "Years (ka)") #Plotting through stratiplot while referencing metadata age from the original download data
library("neotoma")
library("analogue")
library("rworldmap")
apple <- neotoma::get_site(sitename = 'Appleman%') #Finding site in Neotoma
appledata <- neotoma::get_download(apple) #Downloading data from Neotoma
appledatapollen <- appledata[[1]] #Pulling just pollen data into a separate data frame
appledatapollen <- compile_taxa(appledatapollen, list.name = "P25") #Compressing taxa name with P25
applepollenpercent <- analogue::tran(x = appledatapollen$counts, method = "percent") #Transforming pollen counts from data matrix 2, $counts into percents
applepollenpercent <- applepollenpercent[, colMeans(applepollenpercent, na.rm = TRUE) > 2] #Getting rid of all percents less than 2
Stratiplot(x = applepollenpercent, y = appledata[[1]]$sample.meta$age, xlab = "Percent", ylab = "Years (ka)") #Plott
crys <- neotoma::get_dataset(10413)
crysdata <- neotoma::get_download(crys)
crysdatapollen <- crysdata[[3]]
crysdatapollen <- compile_taxa(crysdatapollen, list.name = "P25")
cryspollenpercent <- tran(x = crysdata[[3]]$counts, method = "percent")
cryspollenpercent <- cryspollenpercent[, colMeans(cryspollenpercent, na.rm = TRUE) > 2]
Stratiplot(x = cryspollenpercent, y = crysdata[[3]]$sample.meta$age, xlab = "Percent", ylab = "Years (ka)")
applepollenpercent
str(appledatapollen)
library("Rcmdr")
library("Rcmdr")
q()
library("Rcmdr")
q()
library(neotoma)
library(analogue)
library(ggplot2)
library(reshape2)
#PULLING DATA FOR SUMMARY STATS
apl <- get_dataset(10003)
apl_data <- get_download(apl)
apl_poll64 <- compile_taxa(apl_data, list.name = "WS64")
a_junk <- analogue::tran(x = apl_poll64[[1]]$counts, method = 'percent')
apl_pct <- data.frame(a_junk)
apl_interest <- data.frame(apl_poll64[[1]]$sample.meta$age,apl_pct$Picea,apl_pct$Tsuga.undifferentiated,apl_pct$Fagus)
names(apl_interest)[1] <- "Age"
names(apl_interest)[2] <- "Picea"
names(apl_interest)[3] <- "Tsuga"
names(apl_interest)[4] <- "Fagus"
aplMelt <- melt(apl_interest, id.vars=c("Age"))
#PLOTTING DATA
picea <- ggplot(apl_interest) +
geom_line(aes(x = Age, y = Picea), size = 1.5, col = "#F8766D") +
scale_x_reverse()
picea
tsuga <- ggplot(apl_interest) +
geom_line(aes(x = Age, y = Tsuga), size = 1.5, col = "#00BA38") +
scale_x_reverse()
tsuga
fagus <- ggplot(apl_interest) +
geom_line(aes(x = Age, y = Fagus), size = 1.5, col = "#619CFF") +
scale_x_reverse()
fagus
all <- ggplot(aplMelt) +
geom_line(aes(x = Age, y=value, col=variable), size = 1.5) +
scale_x_reverse()
all
#COMBINED LEGEND AND PLOTS
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(all)
arrange <- grid.arrange(arrangeGrob(picea + theme(legend.position = "none"),
tsuga + theme(legend.position = "none"),
fagus + theme(legend.position = "none"),
all + theme(legend.position = "none"),
nrow=2),
mylegend, nrow=2,heights=c(10, 1))
library(reshape2)
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(all)
arrange <- grid.arrange(arrangeGrob(picea + theme(legend.position = "none"),
tsuga + theme(legend.position = "none"),
fagus + theme(legend.position = "none"),
all + theme(legend.position = "none"),
nrow=2),
mylegend, nrow=2,heights=c(10, 1))
library(gridExtra)
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(all)
arrange <- grid.arrange(arrangeGrob(picea + theme(legend.position = "none"),
tsuga + theme(legend.position = "none"),
fagus + theme(legend.position = "none"),
all + theme(legend.position = "none"),
nrow=2),
mylegend, nrow=2,heights=c(10, 1))
library(neotoma)
library(analogue)
library(ggplot2)
library(reshape2)
library(tsDyn)
get_site(sitename = "Stotzel")
get_site(sitename = "Stotzel")
get_site(sitename = "Stotzel-Leis")
get_search(sitename = "Stotzel-Leis")
get_site(sitename = "Stotzel%")
stot <- get_site(sitename = "Stotzel%")
get_download(stot)
stot <- get_download(stot)
rm(list = ls())
rm(list = ls())
library(neotoma)
library(analogue)
library(ggplot2)
library(reshape2)
library(tsDyn)
silv <- get_site(sitename = "Silver Lake")
silv
silv[[3]]
str(silv)
silv <- get_download(2303)
silv <- get_dataset(2303)
silv
silv <- get_download(silv)
apl <- get_dataset(16)
apl
apl <- get_dataset(10003)
apl
spic <- get_download(siteid = 13350)
spic <- get_download(site = 13350)
stot <- get_site(sitename = "Stotzel%")
stot <- get_download(stot)
silv <- get_dataset(2303)
silv <- get_download(silv)
apl <- get_dataset(10003)
apl <- get_download(apl)
cry <- get_dataset(10413)
cry <- get_download(cry)
spic <- get_dataset(13350)
spic <- get_download(spic)
cry
cry[[2]]$counts
cry[[3]]$counts
stot_pct <- compile_taxa(apl, list = "WS64")
stot_64 <- compile_taxa(apl, list = "WS64")
stot_64
stot_pct <- tran(stot_64[[1]]$counts, method = 'percent')
Stratiplot(x = stot_pct, y = stot_64[[1]]$sample.meta$age)
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 2]
Stratiplot(x = stot_pct, y = stot_64[[1]]$sample.meta$age)
stot_64 <- compile_taxa(stot, list = "WS64")
stot_pct <- tran(stot_64[[1]]$counts, method = 'percent')
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 2]
Stratiplot(x = stot_pct, y = stot_64[[1]]$sample.meta$age)
stot_64 <- compile_taxa(stot, list = "WS64")
stot_pct <- tran(stot_64[[1]]$counts, method = 'percent')
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 2]
Stratiplot(x = stot_pct, y = stot_64[[1]]$sample.meta$age)
stot_pct
view(stot_pct)
str(stot_pct)
stot_64
stot_pct <- tran(stot_64[[2]]$counts, method = 'percent')
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 2]
Stratiplot(x = stot_pct, y = stot_64[[1]]$sample.meta$age)
Stratiplot(x = stot_pct, y = stot_64[[1]]$sample.meta$age)
Stratiplot(x = stot_pct, y = stot_64[[2]]$sample.meta$age)
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 1]
Stratiplot(x = stot_pct, y = stot_64[[2]]$sample.meta$age)
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 0.5]
stot_pct <- tran(stot_64[[2]]$counts, method = 'percent')
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 0.5]
Stratiplot(x = stot_pct, y = stot_64[[2]]$sample.meta$age)
stot_pct <- tran(stot_64[[2]]$counts, method = 'percent')
stot_pct <- stot_pct[, colMeans(stot_pct, na.rm = TRUE) > 1]
Stratiplot(x = stot_pct, y = stot_64[[2]]$sample.meta$age)
stot
stot[[1]]
stot[[1]]$counts
Stratiplot(x = stot[[1]]$counts, y = stot[[2]]$sample.meta$age)
plot(stot[[1]]$counts)
ggplot()
ggplot(stot[[1]]$counts) + geom_line(aes(x = loss-on-ignitiion, y = stot[[2]]$sample.meta$age))
plot(x = stot[[1]]$counts, y = stot[[2]]$sample.meta$age)
loi <- data.frame(stot[[1]]$sample.meta$age, stot[[1]]$counts)
names(loi)[1] <- "age"
names(loi)[1] <- "loi"
loi
View(loi)
loi <- data.frame(stot[[2]]$sample.meta$age, stot[[1]]$counts)
stot[[1]]
stot[[1]]$chronologies
silv
silv[[1]]$lab.data
silv[[1]]$sample.meta$unit.name
silv[[1]]$sample.meta$dataset.id
silv <- get_dataset(2303)
silv <- get_download(silv)
silv <- compile_taxa(silv, list="WS64")
silv_pct <- tran(silv[[1]]$counts, method = 'percent')
silv_pct <- colMeans(silv_pct, na.rm = TRUE) > 1
Stratiplot(x = silv_pct, y = silv[[2]]$sample.meta$age)
silv <- compile_taxa(silv, list="WS64")
silv_pct <- tran(silv[[1]]$counts, method = 'percent')
silv_pct <- silv_pct[, colMeans(silv_pct, na.rm = TRUE) > 1]
Stratiplot(x = silv_pct, y = silv[[2]]$sample.meta$age)
silv_pct
silv <- get_dataset(2303)
silv <- get_download(silv)
silv
silv <- compile_taxa(silv, list="WS64")
silv
silv_pct <- tran(silv[[2]]$counts, method = 'percent')
silv_pct <- silv_pct[, colMeans(silv_pct, na.rm = TRUE) > 1]
Stratiplot(x = silv_pct, y = silv[[1]]$sample.meta$age)
Stratiplot(x = silv_pct, y = silv[[1]]$sample.meta$age)
silv <- get_dataset(2303)
silv <- get_download(silv)
silv <- compile_taxa(silv[[2]], list="WS64")
silv_pct <- tran(silv[[2]]$counts, method = 'percent')
silv_pct <- tran(silv$counts, method = 'percent')
silv_pct <- silv_pct[, colMeans(silv_pct, na.rm = TRUE) > 1]
Stratiplot(x = silv_pct, y = silv[[2]]$age)
silv
silv[[1]]
silv <- get_dataset(2303)
silv <- get_download(silv)
silv_64 <- compile_taxa(silv[[2]], list="WS64")
silv
silv_64
silv[[1]]$taxon.list
silv_pct <- tran(silv64[[1]]$counts, method = 'percent')
silv_pct <- tran(silv_64[[1]]$counts, method = 'percent')
silv_pct <- tran(silv_64$counts, method = 'percent')
silv_pct
silv_pct <- silv_pct[, colMeans(silv_pct, na.rm = TRUE) > 1]
Stratiplot(x = silv_pct, y = silv_64$sample.meta$age)
data.frame(silv_pct)
test <- data.frame(silv_pct)
View(test)
apl <- get_dataset(10003)
apl <- get_download(apl)
apl
apl_64 <- compile_taxa(apl_data, list.name = "WS64")
apl_64 <- compile_taxa(apl, list.name = "WS64")
apl_pct <- colMeans(apl_pct, na.rm = TRUE) > 1
apl_pct <- tran(apl_64[[1]]$counts, method = 'percent')
apl_pct <- colMeans(apl_pct, na.rm = TRUE) > 1
apl_pct <- tran(apl_64[[1]]$counts, method = 'percent')
apl_pct <- apl_pct[, colMeans(apl_pct, na.rm = TRUE) > 1]
Stratiplot(x = apl_pct, y = apl[[1]]$sample.meta$age)
View(apl_pct)
library(neotoma)
library(analogue)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(tsDyn)
apl <- get_dataset(10003)
apl_data <- get_download(apl)
apl[[1]]$submission
apl[[1]]$dataset.meta$collection.type
apl[[1]]$dataset.meta$collection.handle
apl[[1]]$dataset.meta$dataset.type
apl[[2]]$access.date
apl[[2]]$site.data$description
apl[[2]]$pi.data
apl[[2]]$description
apl[[2]]$dataset.meta$collection.handle
?pt
pt(.096, 35, lower.tail = FALSE)
rm(list = ls()) # Remove all objects defined in workspace.
x = c(5, 7)
sum(x)
answer.1 = print(sum(x)) # ... set this variable correctly (please don't use "5+7"
answer.1 = print(sumx) # ... set this variable correctly (please don't use "5+7"
sumx <- sum(x)
answer.1 = print(sumx) # ... set this variable correctly (please don't use "5+7"
# or "12": use more general code that will work even if x
cat(sep="", "sum of elements of x is ", answer.1, "\n")
x = c(5, 7, 12)
sumx <- sum(x)
answer.1 = print(sumx) # ... set this variable correctly (please don't use "5+7"
x = c(5, 7)
sumx <- sum(x)
answer.1 = print(sumx) # ... set this variable correctly (please don't use "5+7"
cat(sep="", "sum of elements of x is ", answer.1, "\n")
?rnorm
rnorn(2, 0, 1)
rnorm(2, 0, 1)
rnorm(2, 0, 1)
rnorm(2, 0, 1)
rnorm(2, 0, 1)
rnorm(2, 0, 1)
rnorm(2, 0, 1)
rand__var <- rnorm(2, 0, 1)
sum(rand__var)
rnorm(5, 0, 1)
rand_var <- rnorm(2, 0, 1)
sum_rand <- sum(rand_var)
answer.2 = print(sum_rand) # ... set this variable correctly
cat(sep="", "sum of two random N(0, 1) numbers is ", answer.2, "\n")
rnorm(5)
(1004)^(1/4)
(1005)^(1/4)
1005/19
1005%19
1005%/%19
1005%%19
52*19
988+17
1005%/%19
log(1005, base base = 19)
log(1005, base = 19)
?log
?roound
?round
round(17.250, digits = 0)
ceiling(10.647)
floor(10.647)
?pnorm
pnorm(11.8, 12, 6, lower.tail = TRUE)
pnorm(11.8, 12, 6, lower.tail = FALSE)
qnorm(0.3, 12, 6, lower.tail = TRUE)
?pt
pt(-0.2, 12, lower.tail = FALSE)
1-.4224
qt(.04, 12, lower.tail = FALSE)
x <- pt(1.912313, 12, lower.tail = FALSE)
2*x
qt(.04, 12, lower.tail = FALSE)
1-.9598
?dbinom
dbinom(12, 25, .54)
pbinom(12, 25, .54, lower.tail = TRUE)
rm(list = ls())
setwd('C:\Users\david\Git\STAT327')
setwd("C:/Users/david/Git/STAT327")
setwd("C:\Users\david\Git\STAT327")
setwd("C:/Users/david/Git/STAT327")
source("hw1.r")
rm(list = ls())
source("hw1.r")
# In this hw1.R assignment, we want students to:
#   - learn how to write a trivial R script
#   - learn how to run an R script via the source() function
#   - learn to answer our "write code ..." questions with R code that
#     isn't too specific (I'll describe this point more in class)
# We're hoping that this small exericse will lead to less trouble on
# hw2.R, which requires a more meaningful R script.
#
# You should replace all occurrences of "..." with your code. If you'd
# like to replace a single "..." with more than one line of code
# before my line (using your own variables), you may certainly do
# that.
#
# Name: David Fastovich
# Email: fastovich@wisc.edu
# We'll grade your homework by running this ".R" file via
#   source("hw1.R")
rm(list = ls()) # Remove all objects defined in workspace.
x = c(5, 7)
# Find the sum of the elements of the vector x.
sumx <- sum(x)
answer.1 = print(sumx) # ... set this variable correctly (please don't use "5+7"
# or "12": use more general code that will work even if x
# were changed)
cat(sep="", "sum of elements of x is ", answer.1, "\n")
# Write code to generate two random numbers from N(0, 1) and report
# their sum.
rand_var <- rnorm(2, 0, 1)
sum_rand <- sum(rand_var)
print(sum_rand)
answer.2 = sum_rand # ... set this variable correctly
cat(sep="", "sum of two random N(0, 1) numbers is ", answer.2, "\n")
# In this hw1.R assignment, we want students to:
#   - learn how to write a trivial R script
#   - learn how to run an R script via the source() function
#   - learn to answer our "write code ..." questions with R code that
#     isn't too specific (I'll describe this point more in class)
# We're hoping that this small exericse will lead to less trouble on
# hw2.R, which requires a more meaningful R script.
#
# You should replace all occurrences of "..." with your code. If you'd
# like to replace a single "..." with more than one line of code
# before my line (using your own variables), you may certainly do
# that.
#
# Name: David Fastovich
# Email: fastovich@wisc.edu
# We'll grade your homework by running this ".R" file via
#   source("hw1.R")
rm(list = ls()) # Remove all objects defined in workspace.
x = c(5, 7)
# Find the sum of the elements of the vector x.
sumx <- sum(x)
answer.1 = sumx # ... set this variable correctly (please don't use "5+7"
# or "12": use more general code that will work even if x
# were changed)
cat(sep="", "sum of elements of x is ", answer.1, "\n")
# Write code to generate two random numbers from N(0, 1) and report
# their sum.
rand_var <- rnorm(2, 0, 1)
sum_rand <- sum(rand_var)
print(sum_rand)
answer.2 = sum_rand # ... set this variable correctly
cat(sep="", "sum of two random N(0, 1) numbers is ", answer.2, "\n")
print(sumx)
rm(list = ls())
source("hw1.r")
# In this hw1.R assignment, we want students to:
#   - learn how to write a trivial R script
#   - learn how to run an R script via the source() function
#   - learn to answer our "write code ..." questions with R code that
#     isn't too specific (I'll describe this point more in class)
# We're hoping that this small exericse will lead to less trouble on
# hw2.R, which requires a more meaningful R script.
#
# You should replace all occurrences of "..." with your code. If you'd
# like to replace a single "..." with more than one line of code
# before my line (using your own variables), you may certainly do
# that.
#
# Name: David Fastovich
# Email: fastovich@wisc.edu
# We'll grade your homework by running this ".R" file via
#   source("hw1.R")
rm(list = ls()) # Remove all objects defined in workspace.
x = c(5, 7)
# Find the sum of the elements of the vector x.
sumx <- sum(x)
print(sumx)
answer.1 = sumx # ... set this variable correctly (please don't use "5+7"
# or "12": use more general code that will work even if x
# were changed)
cat(sep="", "sum of elements of x is ", answer.1, "\n")
# Write code to generate two random numbers from N(0, 1) and report
# their sum.
rand_var <- rnorm(2, 0, 1)
sum_rand <- sum(rand_var)
print(sum_rand)
answer.2 = sum_rand # ... set this variable correctly
cat(sep="", "sum of two random N(0, 1) numbers is ", answer.2, "\n")
setwd('C:/Users/david/Git/STAT327')
