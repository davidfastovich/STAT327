stopifnot(isTRUE(all.equal(baby.t$estimate, as.numeric(t$estimate))))
stopifnot(isTRUE(all.equal(baby.t$null.value, as.numeric(t$null.value))))
?porm
?pnorm
alpha = .05
qnorm(alpha)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((length(x) <= 0) | (length(x) >= n))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = (pnorm(z))*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | x <= n))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = (pnorm(z))*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | x =< n ))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = (pnorm(z))*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | n >= x ))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = (pnorm(z))*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = (pnorm(z))*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = (pnorm(z))*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
baby.prop$p.value
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z)
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
z
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = (p.hat - p) / sqrt(p*(1-p)/n)
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, altnerative = two.sided)
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, altnerative = two.sided)
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$conf.int), c(.60434555, .83565445))))
baby.prop$conf.int
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - qnorm(alpha, lower.tail = FALSE) * sqrt(p.hat*(1-p.hat)/n)
int.high = p.hat + qnorm(alpha, lower.tail = FALSE) * sqrt(p.hat*(1-p.hat)/n)
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$conf.int), c(.60434555, .83565445))))
baby.prop$conf.int
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm(alpha, lower.tail = FALSE) * sqrt(p.hat*(1-p.hat)/n))
int.high = p.hat + (qnorm(alpha, lower.tail = FALSE) * sqrt(p.hat*(1-p.hat)/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$conf.int), c(.60434555, .83565445))))
baby.prop$conf.int
1-.99
alpha = (1-.99)
qnorm(alpha)
qnorm(alpha, lower.tail = F)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm(alpha, lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm(alpha, lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$conf.int), c(.60434555, .83565445))))
baby.prop$conf.int
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) | (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) | (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop = baby.prop.test(72, 100, .7, conf.level=.99)
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$statistic), .43643578)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$p.value), .66252058)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$conf.int), c(.60434555, .83565445))))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$estimate), .72)))
stopifnot(isTRUE(all.equal(as.numeric(baby.prop$null.value), .7)))
quadratic.formula = function(a, b, c) {
if(a == 0) {
return(NULL)
} else if (discriminant(a , b, c) < 0) {
return(numeric(0))
} else {
sol1 = (-b+sqrt(discriminant(a, b, c)))/(2*a)
sol2 = (-b-sqrt(discriminant(a, b, c)))/(2*a)
x <- c(sol1, sol2)
return(sort(x))
}
}
stopifnot(isTRUE(all.equal(quadratic.formula(0, 0,  0), NULL)))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 0,  1), numeric(0))))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 0, -4), c(-2, 2))))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 0, -1), c(-1, 1))))
discriminant = function(a, b, c) {
value <- ((b^2) - (4*a*c))
return(value)
}
stopifnot(isTRUE(all.equal(discriminant(0, 0,  0), 0)))
stopifnot(isTRUE(all.equal(discriminant(0, 0,  1), 0)))
stopifnot(isTRUE(all.equal(discriminant(0, 1,  0), 1)))
stopifnot(isTRUE(all.equal(discriminant(0, 1,  1), 1)))
stopifnot(isTRUE(all.equal(discriminant(1, 0,  0), 0)))
stopifnot(isTRUE(all.equal(discriminant(1, 0,  1), -4)))
stopifnot(isTRUE(all.equal(discriminant(1, 1,  1), -3)))
stopifnot(isTRUE(all.equal(discriminant(1, -1,  -1), 5)))
stopifnot(isTRUE(all.equal(discriminant(-1, -1,  -1), -3)))
quadratic.formula = function(a, b, c) {
if(a == 0) {
return(NULL)
} else if (discriminant(a , b, c) < 0) {
return(numeric(0))
} else {
sol1 = (-b+sqrt(discriminant(a, b, c)))/(2*a)
sol2 = (-b-sqrt(discriminant(a, b, c)))/(2*a)
x <- c(sol1, sol2)
return(sort(x))
}
}
stopifnot(isTRUE(all.equal(quadratic.formula(0, 0,  0), NULL)))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 0,  1), numeric(0))))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 0, -1), c(-1, 1))))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 0, -4), c(-2, 2))))
stopifnot(isTRUE(all.equal(quadratic.formula(2, 0, -8), c(-2, 2))))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 5,  6), c(-3,-2))))
stopifnot(isTRUE(all.equal(quadratic.formula(1, 1, -6), c(-3, 2))))
quadratic.formula(-1, -1, -1)
discriminant(-1, -1, -1)
setwd("~/Git/STAT327/Section2")
rm(list = ls)
rm(list = ls())
source(hw1.r)
source("hw1.R")
baby.prop.test(10, 8, 1, conf.level = .90)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) & (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) & (p < 1))
stopifnot((conf.level > 0) | (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test(10, 8, 1, conf.level = .90)
baby.prop.test(10, 11, 2, conf.level = .90)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot((x >=  0) & (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) & (p < 1))
stopifnot((conf.level > 0) & (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test(10, 11, .01, conf.level = 2)
baby.prop.test(-1, 11, .01, conf.level = .9)
baby.prop.test(c(1,2), 11, .01, conf.level = .9)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot(length(x) >= 2)
stopifnot((x >=  0) & (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) & (p < 1))
stopifnot((conf.level > 0) & (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test(c(1,2), 11, .01, conf.level = .9)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot(length(x) != 1)
stopifnot((x >=  0) & (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) & (p < 1))
stopifnot((conf.level > 0) & (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test(c(1,2), 11, .01, conf.level = .9)
x = c(1,2)
length(x)
baby.prop.test = function (x, n, p, conf.level = 0.95) {
stopifnot(length(x) > 1)
stopifnot((x >=  0) & (n >= x))
stopifnot(n > 0)
stopifnot((p > 0) & (p < 1))
stopifnot((conf.level > 0) & (conf.level < 1))
alpha = 1 - conf.level
p.hat = (x/n)
z = ((p.hat - p) / sqrt(p*(1-p)/n))
int.low =  p.hat - (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
int.high = p.hat + (qnorm((alpha/2), lower.tail = FALSE) * sqrt((p.hat*(1-p.hat))/n))
value = list()
value$conf.int = c(int.low, int.high)
value$estimate = p.hat
value$p.value = pnorm(z, lower.tail = FALSE)*2
value$statistic = z
value$null.value = p
return(value)
}
baby.prop.test(c(1,2), 11, .01, conf.level = .9)
samara.slope.int <- lm(y ~ x1, data = samara)
anova(samara.slope.int, samara.fit)
samara <- read.table("samara.txt", header = TRUE)
View(samara)
# Loading data and computing new variables
oat <- read.table("oat.txt", header = TRUE)
oat$x2 <- (oat$x)^2
oat$x3 <- (oat$x)^3
par(mfrow = c(1, 3))
plot(x = oat$x, y = oat$y, main = "Untransformed Data")
lines(x = sort(oat$x), y = oat.fit$fitted.values[order(oat$x)])
oat.fit <- lm(y ~ x + x2 + x3, data = oat)
anova(oat.fit)
summary(oat.fit)
ln.oat.fit <- lm(log(y) ~ x + x2 + x3, data = oat)
anova(ln.oat.fit)
summary(ln.oat.fit)
par(mfrow = c(1, 3))
plot(x = oat$x, y = oat$y, main = "Untransformed Data")
lines(x = sort(oat$x), y = oat.fit$fitted.values[order(oat$x)])
plot(oat.fit, which = 1, main = "Untransformed Data")
plot(oat.fit, which = 1, main = "Untransformed Data")
plot(x = oat$x, y = log(oat$y), main = "ln Transformed data")
lines(x = sort(oat$x), y = ln.oat.fit$fitted.values[order(oat$x)])
plot(ln.oat.fit, which = 1, main = "ln Transformed Data")
plot(ln.oat.fit, which = 2, main = "ln Transformed Data")
par(mfrow = c(1, 3))
plot(x = oat$x, y = oat$y, main = "Untransformed Data")
lines(x = sort(oat$x), y = oat.fit$fitted.values[order(oat$x)])
plot(oat.fit, which = 1, main = "Untransformed Data")
plot(oat.fit, which = 2, main = "Untransformed Data")
plot(x = oat$x, y = log(oat$y), main = "ln Transformed data")
lines(x = sort(oat$x), y = ln.oat.fit$fitted.values[order(oat$x)])
plot(ln.oat.fit, which = 1, main = "ln Transformed Data")
plot(ln.oat.fit, which = 2, main = "ln Transformed Data")
