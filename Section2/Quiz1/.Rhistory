a = c("Brown,Joe    123456789 jbrown@wisc.edu      1000",
"Roukos,Sally 456789123 sroukos@wisc.edu     5000",
"Chen,Jean    789123456 chen@wisc.edu       24000",
"Juniper,Jack 345678912 jjuniper@wisc.edu  300000"
)
grep(pattern = "j", x = a)
grep(pattern = "j", x = a, ignore.case=TRUE, value = TRUE)
a
grep(pattern = "j", x = a, ignore.case = TRUE)
sub(pattern = "e", replacement = "E", x = a)
gsub(pattern = "e", replacement = "_E_", x = a)
gsub(pattern = "[aeiou]", replacement = "", x = a) # strip vowels
gsub(pattern = "[^aeiou]", replacement = "", x = a) # strip non-vowels
grep(pattern = "^r", x = a)
grep(pattern = "^r", ignore.case = TRUE, x = a)
a
grep(pattern = "^e", ignore.case = TRUE, x = a)
grep(pattern = "e", ignore.case = TRUE, x = a)
grep(pattern = "^n", ignore.case = TRUE, x = a)
grep(pattern = "^b", ignore.case = TRUE, x = a)
grep(pattern = "b", ignore.case = TRUE, x = a)
grep(pattern = "^r", x = a)
grep(pattern = "^r", ignore.case = TRUE, x = a)
grep(pattern = "e\\>", x = a)
a
grep(pattern = "e\>", x = a)
grep(pattern = "\\d{4}$", x = a) # 4 digits, end-of-line
a
a[grep(pattern = "\\d{4}$", x = a) # 4 digits, end-of-line]
)
grep(pattern = "\\d{4}$", x = a) # 4 digits, end-of-line
grep(pattern = " \\d{4}$", x = a) # space, 4 digits, end-of-line
sub(pattern="\\d{1, }" , replacement="X", x=a)
grep(pattern = d{4}$", x = a) # 4 digits, end-of-line
grep(pattern = " \\d{4}$", x = a) # space, 4 digits, end-of-line
grep(pattern = " \\d{4,5}$", x = a) # space, 4 or 5 digits, end-of-line
sub(pattern="\\d{1, }" , replacement="X", x=a)
sub(pattern="\\d{1, }?", replacement="X", x=a)
link = "blah blah blah ... <a href=http://www.google.com>Google</a> blah ..."
sub(pattern=".*<a href=(.*)>.*" , replacement="\\1", x=link) # match too much
sub(pattern=".*<a href=(.*?)>.*" , replacement="\\1", x=link) # one fix
sub(pattern=".*<a href=([^>]*)>.*", replacement="\\1", x=link) # another fix
# rewrite "last,first ID email ..." to ".csv": "first,last,user,ID"
b = sub(pattern = "(\\w+),(\\w+) +(\\d+) (\\w+).*", replacement = "\\2,\\1,\\4,\\3", x=a)
# textConnection() allows a character string vector to be treated as a file
d = read.csv(file=textConnection(b), header=FALSE, col.names=c("first","last","user","ID"))
grep(pattern = "Joe|Jack", x = a)
grep(pattern = "J(o|a)", x = a)
?regex
strsplit(x=a, split=",")
strsplit(x=a, split=" +")
(lists.of.words = strsplit(x=a, split=",|( +)"))
(vector.of.words = unlist(lists.of.words))
(m = matrix(vector.of.words, 4, 5, byrow=TRUE))
(d = as.data.frame(m))
colnames(d) = c("last","first","ID","email","number")
grep(pattern = "\d{4}$", x = a) # 4 digits, end-of-line
grep(pattern = "\\d{4}$", x = a) # 4 digits, end-of-line
grep(pattern = " \\d{4}$", x = a) # space, 4 digits, end-of-line
grep(pattern = " \\d{4,5}$", x = a) # space, 4 or 5 digits, end-of-line
sub(pattern="\\d{1, }" , replacement="X", x=a)
sub(pattern="\\d{1, }" , replacement="X", x=a)
sub(pattern="\\d{1, }?", replacement="X", x=a)
sub(pattern="\\d{1, }" , replacement="X", x=a)
sub(pattern="\\d{1, }?", replacement="X", x=a)
sub(pattern="\\d{2, }" , replacement="X", x=a)
sub(pattern="\\d{7, }" , replacement="X", x=a)
sub(pattern="\\d{1, }" , replacement="X", x=a)
grep(pattern = "e\\>", x = a)
grep(pattern = "e\\<", x = a)
grep(pattern = "e\\>", x = a)
grep(pattern = "y\\>", x = a)
rm(list = ls())
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
value <- rle(v)
return(any(value$lengths[value$values == player] >= 4))
}
v <- c("X", "X", "E", "E", "O")
rle(v)
test <- rle(v)
rm(list = ls())
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
value <- rle(v)
return(any(value$lengths[value$values == player] >= 4))
}
won = function(player, board, r, c, debug=FALSE) {
if (debug) {
cat(sep="", "won(player=", player, ", board=\n")
print(board)
cat(sep="", ", r=", r, ", c=", c, ")\n")
}
if(four.in.a.row(player, v = board[row(board) == r]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[col(board) == c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[row(board) - col(board) == r - c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[row(board) + col(board) == r + c]) == TRUE) {
return(TRUE)
} else {
return(FALSE)
}
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "")) { #This fails the stopifnots in the test script because I changed my empty value in the matrix to "" instead of "E"
return(max(which(board[,col] == "")))
} else {
return(TRUE) #I have it return TRUE instead of NULL because that makes implementing a while loop in the game a lot easier
}
}
x = rep(1:7, each = 6)
y = rep(1:6, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
if( player == "X") {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
} else {
index = sample(x=which(c(board) == ""), size=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
eng <- read.table("engineer.txt", header = TRUE)
plot(y ~ jitter(x), data = eng)
fit.eng <- glm(y ~ x, family = binomial(logit), data = eng)
fit.eng$coefficients
summary(fit.eng)
summary(fit.eng)
fit.engnull <- glm(y ~ 1, family = binomial(logit), data = eng)
avova(fit.engnull, fit.eng, test = "Chisq")
anova(fit.engnull, fit.eng, test = "Chisq")
anova(fit.eng)
anova(fit.eng, test = "Chisq")
anova(fit.eng, test = "Chisq")
?chi
pchisq(5.2438, df=23)
pchisq(5.2438, df=21
)
pchisq(5.2438, df=24)
pchisq(5.2438, df=1)
pchisq(5.2438, df=1, lower.tail = FALSE)
View(eng)
str(eng)
factor(x = eng$y, levels = c(0,1), labels = c("nosuccess", "success"))
eng$y <- factor(x = eng$y, levels = c(0,1), labels = c("nosuccess", "success"))
eng$y
View(eng)
fit.eng <- glm(y ~ x, family = binomial(logit), data = eng)
fit.eng$coefficients
confint(fit.eng, level = 0.95)
summary(fit.eng)
anova(fit.eng, test = "Chisq")
str(eng)
View(eng)
eng <- read.table("engineer.txt", header = TRUE)
eng <- read.table("engineer.txt", header = TRUE)
?predict
predict(eng, data.frame(x = 11))
predict(fit.eng)
predict(eng, 11)
predict(eng, new.data = data.frame(x = 10))
predict(eng, new.data = data.frame(x = c(10)))
test <- 10
predict(eng, new.data = test)
test <- data.frame(x = 10)
predict(eng, new.data = test)
predict(fit.eng, new.data = data.frame(x = 10))
predict(fit.eng, new.data = data.frame(x = 10))
predict(fit.eng, new.data = test)
exp(2)
summary(fit.eng)
-1.68420 + (0.11938*10) #beta_0 plus beta_1 * 10
exp(-0.4904/(1+exp(-.4904)))
-1.68420 + (0.11938*11) #beta_0 plus beta_1 * 11
exp(-0.37102/(1+exp(-.37102)))
exp(-0.4904/(1+exp(-.4904)))
prob10 <- exp(-0.4904/(1+exp(-.4904)))
prob11 <- exp(-0.37102/(1+exp(-.37102)))
prob10 + prob11
exp(-1)
exp(1)
prob10 <- exp(-0.4904/(1-exp(-.4904)))
prob11 <- exp(-0.37102/(1-exp(-.37102)))
prob10 + prob11
prob.10.11 <- prob10 + prob11
(prob.10.11)/(1-prob.10.11)
odds.10 <- (prob10)/(1-prob10)
odds.11 <- (prob11)/(1-prob11)
odds.11-odds.10
odds.10
odds.11
exp(0.11938)
exp(0.11938)/(1 - exp(0.11938))
(0.11938*10)
-1.68420 + (0.11938*10)
predict(fit.eng)
exp(0.11938)
odds.11//odds.10
odds.11/odds.10
odds.10/odds.11
pred <- predict(fit.eng)
pred[10]
pred[11]
prob10 <- exp(pred[10]/(1-exp(pred[10])))
pred <- predict(fit.eng)
prob10 <- exp(pred[10]/(1-exp(pred[10])))
prob11 <- exp(pred[11]/(1-exp(pred[11])))
prob.10.11 <- prob10 + prob11
prob10 + prob11
odds.10 <- (prob10)/(1-prob10)
odds.11 <- (prob11)/(1-prob11)
odds.11/odds.10
odds.11/odds.10
tab <- read.table("tabaci.txt", header = TRUE)
View(tab)
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
library(ggplot2)
ggplot(tab, aes(x, y)) +
geom_jitter(aes(color = subsp)) +
xlab("Concentration") +
ylab("Response")
ggplot(tab, aes(conc, resp)) +
geom_jitter(aes(color = subsp)) +
xlab("Concentration") +
ylab("Response")
ggplot(tab, aes(conc, resp)) +
geom_jitter(aes(color = subsp)) +
xlab("Concentration") +
ylab("Response")
tab.fit <- glm(resp ~ conc + subsp_indic + conc:subsp_indic, family = binomial(logit), data = tab)
tab$subsp <- factor(tab$subsp, levels = c(1, 2), labels = ("a", "b"))
tab$subsp <- factor(tab$subsp, levels = c(1, 2), labels = c("a", "b"))
str(tab)
?factor
tab$subsp <- factor(tab$subsp, levels = c("a", "b"), labels = c(1, 2))
?factpr
str(tab)
tab <- read.table("tabaci.txt", header = TRUE)
tab$subsp_indic <- factor(tab$subsp, levels = c(1, 2), labels = c("a", "b"))
str(tab)
tab
tab <- read.table("tabaci.txt", header = TRUE)
tab
tab$subsp_indic <- factor(tab$subsp, levels = (1, 2), labels = c("a", "b"))
tab$subsp_indic <- factor(tab$subsp, labels = c("a", "b"))
tab <- read.table("tabaci.txt", header = TRUE)
tab$subsp_indic <- factor(tab$subsp_indic, levels = (1, 2), labels = c("a", "b"))
tab$subsp_indic <- factor(tab$subsp_indic, levels = c(1, 2), labels = c("a", "b"))
tab
tab.fit <- glm(resp ~ conc + subsp_indic + conc:subsp_indic, family = binomial(logit), data = tab)
summary(tab.fit)
tab <- read.table("tabaci.txt", header = TRUE)
tab.fit <- glm(resp ~ conc + subsp_indic + conc:subsp_indic, family = binomial(logit), data = tab)
tab.fit.same <- glm(resp ~ conc, family = binomial(logit), data = tab
tab.fit.same <- glm(resp ~ conc, family = binomial(logit), data = tab)
tab.fit.same <- glm(resp ~ conc, family = binomial(logit), data = tab)
anova(tab.fit.same, tab.fit.diff)
tab.fit.diff <- glm(resp ~ conc + subsp_indic + conc:subsp_indic, family = binomial(logit), data = tab)
tab.fit.same <- glm(resp ~ conc, family = binomial(logit), data = tab)
anova(tab.fit.same, tab.fit.diff)
anova(tab.fit.same, tab.fit.diff, test = "Chisq")
(prob.10.11) <- prob10 + prob11
tab.fit.same$coefficients[1]
tab.fit.same.slope <- glm(resp ~ conc + subsp_indic, family = binomial(logit), data = tab)
tab.fit.same.slope$contrasts
tab.fit$linear.predictors
tab.fit$model
summary(tab.fit.same.slope)
tab.fit.same <- glm(resp ~ conc, family = binomial(logit), data = tab)
summar(tab.fit.same)
summary(tab.fit.same)
z.stat <- (tab.fit.same.slope$coefficients[2] - 3)/(0.6079)
pnorm(z.stat)
z.stat
summary(tab.fit.same.slope)
z.stat <- (2.2043 - 3)/(0.6079)
pnorm(z.stat)
sub(pattern = "(\\S+\\s\\S+)", replacement = "XXX", x = v)
v = readLines(con="fastovichQ1.txt")
setwd("~/STAT327/Section2/Quiz1")
v = readLines(con="fastovichQ1.txt")
sub(pattern = "(\\S+\\s\\S+)", replacement = "XXX", x = v)
sub(pattern = "(\\S+\\s\\S+\\s)", replacement = "XXX", x = v)
v[grep(pattern = "(\\S+\\s\\S+\\s)", x = v)]
grep(pattern = "(\\S+\\s\\S+\\s)", x = v, value = TRUE)
sub(pattern = "(\\S+\\s\\S+\\s)", replacement = "XXX", x = v)
sub(pattern = "(\\S+\\s\\S+\\s)", x = v)
sub(pattern = "(\\S+\\s\\S+\\s)", replacement = "\\3", x = v)
v = readLines(con="fastovichQ1.txt")
length(grep(pattern = "^A|B|C", x = v))
length(grep(pattern = "\\D[^aeiou]\\> ", x = v))
length(grep(pattern = "([0-9])\\1", x = v))
v.words <- sub(pattern = "(\\S+\\s\\S+\\s)", replacement = "\\3", x = v)
v.words
sub(pattern = "([aeiou][aeiou])+", replacement = "X", x = v.2)
sub(pattern = "([aeiou][aeiou])+", replacement = "X", x = v.words)
sub(pattern = "([aeiou][aeiou])+", replacement = "XXXXX", x = v.words)
length(grep(pattern = "([aeiou][aeiou])+", x = v.words))
v
sub(pattern = "(\\w+)(\\d+)(\\w+)", replacement = "(\\1)")
sub(pattern = "(\\w+)(\\d+)(\\w+)", replacement = "(\\1)", x = v)
sub(pattern = "(\\w+) +(\\d+) +(\\w+)", replacement = "(\\1)", x = v)
sub(pattern = "(\\w+) +(\\d){4} +(\\w+)", replacement = "\\1,\\2", x = v)
sub(pattern = "(\\w+) +(\\d){4} +(\\w+)", replacement = "\\1,\\2,\\3,\\4,\\5,\\6", x = v)
sub(pattern = "(\\w+) +(\\d) +(\\w+)", replacement = "\\1,\\2,\\3,\\4,\\5,\\6", x = v)
sub(pattern = "(\\w+) +(\\d) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d){4} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d)  +(\\d) +(\\d) +(\\d) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d)(\\d) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d){1} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d){2} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d){4} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +[0-9] +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d){0,4} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d){1} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+)(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) (\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(.) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +([0-9]) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w+) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w){1} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w){4} +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w)\\1 +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w)\\4 +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\w)\\3 +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
sub(pattern = "(\\w+) +(\\d+) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
v.csv <- sub(pattern = "(\\w+) +(\\d+) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
x = read.csv(file = textConnection(v.csv), header = FALSE, col.names = "NAME", "SCORE", "WORD")
x = read.csv(file = textConnection(v.csv), header = FALSE, col.names = "NAME", "SCORE", "WORD"))
x = read.csv(file = textConnection(v.csv), header = FALSE)
col.names = "NAME", "SCORE", "WORD"))
col.names = c("NAME", "SCORE", "WORD")
x
col.names = c("NAME", "SCORE", "WORD")
x = read.csv(file = textConnection(v.csv), header = FALSE)
col.names = c("NAME", "SCORE", "WORD")
col.names(x) = c("NAME", "SCORE", "WORD")
x = read.csv(file = textConnection(v.csv), header = FALSE)
col.names = c("NAME", "SCORE", "WORD")
x
?colnames
colnames(x) = c("NAME", "SCORE", "WORD")
x
sum(x$SCORE)
v.csv <- sub(pattern = "(\\w+) +(\\d+) +(\\w+)", replacement = "\\1,\\2,\\3", x = v)
v.csv
v.csv <- sub(pattern = "(\\w+) +(\\d+) +(\\w+).*", replacement = "\\1,\\2,\\3", x = v)
x = read.csv(file = textConnection(v.csv), header = FALSE)
colnames(x) = c("NAME", "SCORE", "WORD")
sum(x$SCORE)
x
v.csv
x
v.csv <- sub(pattern = "(\\w+) +(\\d+) (\\w+).*", replacement = "\\1,\\2,\\3", x = v)
x = read.csv(file = textConnection(v.csv), header = FALSE)
colnames(x) = c("NAME", "SCORE", "WORD")
sum(x$SCORE)
v.csv <- sub(pattern = "(\\w+) +(\\d+) (\\w+).*", replacement = "\\1,\\2,\\3", x = v)
v
v.sub
v.csv
x
stringsplit(x = x, spline(x$SCORE))
strsplit(x = x, spline(x$SCORE))
strsplit(x = x, split(x$SCORE))
strsplit(x = x$SCORE, split(x$SCORE))
strsplit(x = x$SCORE, split(*)
colnames(x) = c("NAME", "SCORE", "WORD")
sum(x$SCORE)
strsplit(x = x$SCORE, split(*)
colnames(x) = c("NAME", "SCORE", "WORD")
sum(x$SCORE)
strsplit(x = x$SCORE, split(*))
strsplit(x = as.character(x$SCORE), split = "*")
strsplit(x = as.character(x$SCORE), split = "*")
unlist(strsplit(x = as.character(x$SCORE), split = "*"))
sum(as.numeric(unlist(strsplit(x = as.character(x$SCORE), split = "*"))))
v.words
sub(pattern = "[aeiou][^aeiou]", replacement = "XXX", x = v.words)
sub(pattern = "[aeiou][^aeiou]", replacement = "\\2\\1", x = v.words)
sub(pattern = "[aeiou][^aeiou]", replacement = "\\1", x = v.words)
sub(pattern = "[aeiou][^aeiou]", replacement = "[^aeiou][aeiou]", x = v.words)
sub(pattern = "[aeiou][^aeiou]", replacement = ",", x = v.words)
sub(pattern = "[aeiou][^aeiou]", replacement = "\\1", x = v.words)
v.words
sub(pattern = ".[aeiou][^aeiou]", replacement = "\\1", x = v.words)
sub(pattern = ".[aeiou][^aeiou]", replacement = "XXXXX", x = v.words)
sub(pattern = ".[aeiou][^aeiou]", replacement = "\\2\\1", x = v.words)
sub(pattern = "\\w[aeiou]\\w[^aeiou]", replacement = "XXXXX", x = v.words)
sub(pattern = "(\\w[aeiou]) +(\\w[^aeiou])", replacement = "XXXXX", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "XXXXX", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\2\\1", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\2\\1", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\2 \\1", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\2XXX\\1", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\1   \\2", x = v.words)
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\1\\2", x = v.words)
v.words
sub(pattern = "(\\w[aeiou])(\\w[^aeiou])", replacement = "\\2\\1", x = v.words)
sub(pattern = "(\\[aeiou])(\\[^aeiou])", replacement = "\\2\\1", x = v.words)
sub(pattern = "([aeiou])([^aeiou])", replacement = "\\2\\1", x = v.words)
v.words
v.words.flip <- sub(pattern = "([aeiou])([^aeiou])", replacement = "\\2\\1", x = v.words)
length(grep(pattern = "([aeiou][aeiou])+", x = v.words.flip))
sub(pattern = "([aeiou])([^aeiou])", replacement = "XXXXX", x = v.words)
a = c("Brown,Joe    123456789 jbrown@wisc.edu      1000",
"Roukos,Sally 456789123 sroukos@wisc.edu     5000",
"Chen,Jean    789123456 chen@wisc.edu       24000",
"Juniper,Jack 345678912 jjuniper@wisc.edu  300000"
)
v.words.flip <- sub(pattern = "([aeiou])([^aeiou])", replacement = "\\2\\1", x = v.words)
length(grep(pattern = "([aeiou][aeiou])+", x = v.words.flip))
