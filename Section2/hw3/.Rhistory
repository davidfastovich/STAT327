stopifnot(!won(player="X", board=board, r=1, c=1, debug=TRUE))
stopifnot(!won(player="O", board=board, r=1, c=1, debug=TRUE))
stopifnot(!won(player="X", board=board, r=2, c=3, debug=TRUE))
stopifnot(!won(player="O", board=board, r=2, c=3, debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","X",
"X","X","X","X","O","E","X"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=board, r=6, c=1, debug=TRUE))
stopifnot(!won(player="O", board=board, r=6, c=1, debug=TRUE))
stopifnot(!won(player="X", board=board, r=1, c=7, debug=TRUE))
stopifnot( won(player="O", board=board, r=1, c=7, debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","X","O","E","E","E",
"E","E","O","X","O","E","E",
"E","E","X","X","X","O","E",
"E","E","O","X","O","X","O",
"E","E","X","O","X","X","O"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=board, r=2, c=3, debug=TRUE))
stopifnot(!won(player="O", board=board, r=2, c=3, debug=TRUE))
stopifnot(!won(player="X", board=board, r=2, c=4, debug=TRUE))
stopifnot( won(player="O", board=board, r=2, c=4, debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","X","O","E","E",
"E","E","X","O","X","E","E",
"E","X","O","X","O","E","E",
"X","O","O","O","X","E","E",
"X","O","X","X","O","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=board, r=5, c=1, debug=TRUE))
stopifnot(!won(player="O", board=board, r=5, c=1, debug=TRUE))
stopifnot( won(player="X", board=board, r=4, c=2, debug=TRUE))
stopifnot(!won(player="O", board=board, r=4, c=2, debug=TRUE))
stopifnot(!won(player="X", board=board, r=2, c=5, debug=TRUE))
stopifnot( won(player="O", board=board, r=2, c=5, debug=TRUE))
stopifnot(4 == largest.empty.row(board=board, col=1, debug=TRUE))
stopifnot(3 == largest.empty.row(board=board, col=2, debug=TRUE))
stopifnot(2 == largest.empty.row(board=board, col=3, debug=TRUE))
stopifnot(1 == largest.empty.row(board=board, col=4, debug=TRUE))
stopifnot(1 == largest.empty.row(board=board, col=5, debug=TRUE))
stopifnot(6 == largest.empty.row(board=board, col=6, debug=TRUE))
stopifnot(6 == largest.empty.row(board=board, col=7, debug=TRUE))
rm(list = ls())
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
value <- rle(v)
return(any(value$lengths[value$values == player] >= 4))
}
won = function(player, board, r, c, debug=FALSE) {
if (debug) {
cat(sep="", "won(player=", player, ", board=\n")
print(board)
cat(sep="", ", r=", r, ", c=", c, ")\n")
}
if(four.in.a.row(player, v = board[row(board) == r]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[col(board) == c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[row(board) - col(board) == r - c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[row(board) + col(board) == r + c]) == TRUE) {
return(TRUE)
} else {
return(FALSE)
}
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "E")) {
return(max(which(board[,col] == "E")))
} else {
return(TRUE)
}
}
source("hw3test.R") # Run tests on the functions above.
x = rep(1:7, each = 6)
y = rep(1:6, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (empty == NULL) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "E")) {
return(max(which(board[,col] == "E")))
} else {
return(TRUE)
}
}
x = rep(1:7, each = 6)
y = rep(1:6, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "E")) {
return(max(which(board[,col] == "E")))
} else {
return(NULL)
}
}
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (empty == NULL) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
e <- null
e <- NULL
e = NULL
e == NULL
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "E")) {
return(max(which(board[,col] == "E")))
} else {
return(TRUE)
}
}
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
x <- ""
x
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "")) {
return(max(which(board[,col] == "")))
} else {
return(TRUE)
}
}
x = rep(1:7, each = 6)
y = rep(1:6, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
if( player == "X") {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
} else {
index = sample(x=which(c(board) == ""), size=1)
col = x[index]
row = y[index]
}
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
if( player == "X") {
index = identify(x, y, n=1)
col = x[index]
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
} else {
index = sample(x=which(c(board) == ""), size=1)
col = x[index]
row = y[index]
}
empty = largest.empty.row(board, col)
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
source("hw3.R")
rm(list = ls())
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
value <- rle(v)
return(any(value$lengths[value$values == player] >= 4))
}
won = function(player, board, r, c, debug=FALSE) {
if (debug) {
cat(sep="", "won(player=", player, ", board=\n")
print(board)
cat(sep="", ", r=", r, ", c=", c, ")\n")
}
if(four.in.a.row(player, v = board[row(board) == r]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[col(board) == c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[row(board) - col(board) == r - c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = board[row(board) + col(board) == r + c]) == TRUE) {
return(TRUE)
} else {
return(FALSE)
}
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
if (any(board[,col] == "")) {
return(max(which(board[,col] == "")))
} else {
return(TRUE)
}
}
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3), rep("O", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c(rep("X", 3), rep("O", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c("O", rep("X", 3), "O"), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c("O", rep("X", 3), "O"), debug=TRUE))
stopifnot(four.in.a.row(player="X", v=c(rep("X", 4)), debug=TRUE))
stopifnot(four.in.a.row(player="O", v=c(rep("O", 4)), debug=TRUE))
stopifnot(four.in.a.row(player="X", v=c("O", rep("X", 4), "O"), debug=TRUE))
stopifnot(four.in.a.row(player="O", v=c("X", rep("O", 4), "X"), debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot(!won(player="X", board=board, r=1, c=1, debug=TRUE))
stopifnot(!won(player="O", board=board, r=1, c=1, debug=TRUE))
stopifnot(!won(player="X", board=board, r=2, c=3, debug=TRUE))
stopifnot(!won(player="O", board=board, r=2, c=3, debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","X",
"X","X","X","X","O","E","X"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=board, r=6, c=1, debug=TRUE))
stopifnot(!won(player="O", board=board, r=6, c=1, debug=TRUE))
stopifnot(!won(player="X", board=board, r=1, c=7, debug=TRUE))
stopifnot( won(player="O", board=board, r=1, c=7, debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","X","O","E","E","E",
"E","E","O","X","O","E","E",
"E","E","X","X","X","O","E",
"E","E","O","X","O","X","O",
"E","E","X","O","X","X","O"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=board, r=2, c=3, debug=TRUE))
stopifnot(!won(player="O", board=board, r=2, c=3, debug=TRUE))
stopifnot(!won(player="X", board=board, r=2, c=4, debug=TRUE))
stopifnot( won(player="O", board=board, r=2, c=4, debug=TRUE))
board = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","X","O","E","E",
"E","E","X","O","X","E","E",
"E","X","O","X","O","E","E",
"X","O","O","O","X","E","E",
"X","O","X","X","O","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=board, r=5, c=1, debug=TRUE))
stopifnot(!won(player="O", board=board, r=5, c=1, debug=TRUE))
stopifnot( won(player="X", board=board, r=4, c=2, debug=TRUE))
stopifnot(!won(player="O", board=board, r=4, c=2, debug=TRUE))
stopifnot(!won(player="X", board=board, r=2, c=5, debug=TRUE))
stopifnot( won(player="O", board=board, r=2, c=5, debug=TRUE))
stopifnot(4 == largest.empty.row(board=board, col=1, debug=TRUE))
stopifnot(3 == largest.empty.row(board=board, col=2, debug=TRUE))
largest.empty.row(board=board, col=1, debug=TRUE)
rm(list = ls())
source("hw3.R")
rm(list = ls())
source("hw3.R")
player = "X"
for (i in 1:42) {
if( player == "X") {
index = identify(x, y, n=1)
col = x[index]
while (isTRUE(empty)) {
cat(set = "", "Column is full, select an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
}
} else {
index = sample(x=which(c(board) == ""), size=1)
col = x[index]
row = y[index]
}
empty = largest.empty.row(board, col)
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
if(won(player, board, row, col)) {
text(x=2, y=1/3, labels=paste(player, " won!"), col="red")
break
}
player = ifelse(test=(player == "X"), yes="O", no="X")
}
rm(list = ls())
source("hw3.R")
source("hw3.R")
