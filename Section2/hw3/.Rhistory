boxCox(niger.fit)
ln.niger.fit <- lm(log(y) ~ x, data = niger)
plot(ln.niger.fit, which = 1)
ln.niger.fit <- lm(log(y) ~ log(x), data = niger)
plot(ln.niger.fit, which = 1)
boxCox(lm(y ~ log(x), data = niger))
cor(log(niger))
cor(log(niger$x), predict(ln.niger.fit))
cor(log(niger$y), predict(ln.niger.fit))
cor(predict(ln.niger.fit), resid(ln.niger.fit))
cor(predict(ln.niger.fit), rstudent(ln.niger.fit))
durbinWatsonTest(niger.fit)
durbinWatsonTest(niger.fit, alternative = "positive")
durbinWatsonTest(ln.niger.fit, alternative = "positive")
crown <- data.frame(x = c(530, 630, 840, 900, 1020, 1370, 1440, 1760, 2210, 2400, 2400, 2810, 3140, 3360)
y = c(2.8, 3.3, 3.7, 3.7, 4.1, 3.9, 5.1, 5.7, 7.2, 8.0, 9.0, 9.6, 10.5, 12.4, 14.6))
crown <- data.frame(x = c(530, 630, 840, 900, 1020, 1370, 1440, 1760, 2210, 2400, 2400, 2810, 3140, 3360),
y = c(2.8, 3.3, 3.7, 3.7, 4.1, 3.9, 5.1, 5.7, 7.2, 8.0, 9.0, 9.6, 10.5, 12.4, 14.6))
crown <- data.frame(x = c(530, 630, 840, 900, 1020, 1370, 1440, 1760, 2210, 2400, 2400, 2810, 3140, 3360),
y = c(2.8, 3.3, 3.7, 3.7, 4.1, 3.9, 5.1, 5.7, 7.2, 8.0, 9.0, 9.6, 10.5, 12.4, 14.6))
crown <- data.frame(x = c(530, 630, 840, 900, 1020, 1020,1370, 1440, 1760, 2210, 2400, 2400, 2810, 3140, 3360),
y = c(2.8, 3.3, 3.7, 3.7, 4.1, 3.9, 5.1, 5.7, 7.2, 8.0, 9.0, 9.6, 10.5, 12.4, 14.6))
plot(crown)
crown.fit <- lm(y ~ x, data = crown)
plot(crown.fit, which = 1)
sq.crown.fit <- lm(y ~ sqrt(x), which = 1)
sq.crown.fit <- lm(y ~ sqrt(x), data = crown)
plot(sq.crown.fit)
sq.crown.fit <- lm(sqrt(y) ~ sqrt(x), data = crown)
plot(sq.crown.fit, which = 1)
sq.crown.fit <- lm(sqrt(y) ~ x, data = crown)
plot(sq.crown.fit, which = 1)
boxCox(crown.fit)
confint(sq.crown.fit$coefficients)
confint(sq.crown.fit$coefficients)
confint(sq.crown.fit[1])
confint(sq.crown.fit[[1]])
confint(sq.crown.fit[1])
confint(sq.crown.fit, "y", level = .90)
sq.crown.fit
confint(sq.crown.fit, "x", level = .90)
confint(sq.crown.fit, "(Intercept)", level = .90)
x = data.frame(x = 1900)
predict(sq.crown.fit, x)
2.673353^2
islands <- read.table("islands.txt", header = TRUE)
islands.fit <- lm(y ~ x, data = islands)
plot(islands.fit, which = 1)
boxCox(islands.fit)
boxCox(lm(y ~ swrt(x), data data = islands))
boxCox(lm(y ~ swrt(x), data = islands))
boxCox(lm(y ~ sqrt(x), data = islands))
boxCox(lm(y ~ log(x), data = islands))
boxCox(lm(y ~ (1/x), data = islands))
boxCox(lm(y ~ log(x), data = islands))
a = array(data=-(1:24), dim=c(3,4,2))
a
dimnames(a) = list(c("slow", "medium", "fast"), c("cold", "tepid", "warm", "hot"),
c("Monday", "Tuedsay"))
a
a = array(data=-(1:24), dim=c(3,4,3))
a
a = array(data=-(1:24), dim=c(3,4,2))
dimnames(a) = list(c("slow", "medium", "fast"), c("cold", "tepid", "warm", "hot"),
c("Monday", "Tuedsay"))
dim(a) = c(2, 3, 2, 2)
a
dim(a) = c(2, 3, 2, 2, 4)
dim(a) = c(2, 3, 2, 2)
a
dim(a) = NULL # vector
a = array(data=-(1:24), dim=c(3,4,2))
dimnames(a) = list(c("slow", "medium", "fast"), c("cold", "tepid", "warm", "hot"),
c("Monday", "Tuedsay"))
dim(a) = c(4, 6) # 4 by 6
a
dim(a) = NULL # vector
a
dim(a) = c(2, 3, 2, 2) # 2 by 3 by 2 by 2
a
dim(a) = c(3, 4, 2) # back to start
a
a[2, 3, 1]
a[8]
a[ , 3:4, 2]
index = matrix(data=c(1,1,1, 2,2,2), nrow=2, ncol=length(dim(a)), byrow=TRUE)
View(index)
a[index]
(a %% 2) == 0 # Which values are even?
a[(a %% 2) == 0] # Get even values.
a[(a %% 2) == 0] = -a[(a %% 2) == 0] # Set even values: multiply by -1.
a[(a %% 2) == 0]
a
m = matrix(data=1:12, nrow=3, ncol=4, byrow=TRUE)
m
kids = matrix(data=c(c(1,2,6,7,9,11), c(1,5,100,100,100,100)),
nrow=2, ncol=6, byrow=TRUE,
dimnames=list(c("Age","#Toys"),
c("Teresa","Margaret","Monica","Andrew","Mary","Philip")
)
)
kids
cbind(m, 101:103)
rbind(m, 101:104)
row(m) == col(m)
m
rowm <- row(m)
rowm
colm <- col(m)
colm
row(m) == col(m)
m
r = 2; c = 3
m[row(m) - col(m) == r - c] # diagonal through (r, c)
m[ ______________________ ] # reverse diagonal through (r, c)
m[ ______________________ ] # reverse diagonal through (r, c)
row(m) == col(m)
m[row(m) == col(m)] # main diagonal
r = 2; c = 3
m[row(m) - col(m) == r - c] # diagonal through (r, c)
m[row(m) - col(m)] # diagonal through (r, c)
m[row(m) - col(m) == r - c] # diagonal through (r, c)
m
m[-1]
m[col(m) - row(m) == c - r] # reverse diagonal through (r, c)
m[row(m) - col(m) == c - r] # reverse diagonal through (r, c)
m[-1*(row(m) - col(m) == r - c)] # reverse diagonal through (r, c)
m[row(m) + col(m) == r + c] # reverse diagonal through (r, c)
row(m)
row(m) - col(m)
row(m) + col(m)
row(m)
col(m)
A = matrix(data=1:4, nrow=2, ncol=2)
b = c(7, 10)
a
A
A * B
A * b
solve(a=A, b=b)
a = B
A = matrix(data=1:4, nrow=2, ncol=2)
b = c(7, 10)
(x = solve(a=A, b=b))
a = A
a = array(data=-(1:24), dim=c(3,4,2))
dimnames(a) = list(c("slow", "medium", "fast"), c("cold", "tepid", "warm", "hot"),
c("Monday", "Tuedsay"))
solve(a = A)
a
A
solve(b = b)
A %*% x # check: is it b?
a
?solve
?solve
??solve
rm(list = ls())
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
v <- c("O","X","X","X","X","O")
rle(v)
test <- rle(v)
test$lengths
?any
any(test$lengths > 4)
test{{1}}
test[[1]]
test$lengths >=
test$lengths >=  4
any(test$lengths >= 4)
v <- c("O","O","X","X","X","X")
any(test$lengths >= 4)
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
value <- rle(v)
if (any(value$lengths >= 4)) {
return(TRUE)
} else {
return(FALSE)
}
}
rle(v)
test$values
test <- rle(v)
test$values
str(test)
v <- c("O","X","X","X","X","O")
rle(v)
test[1,1]
test[[1]][1]
test[[2]][2]
test[[2]][1]
test[[1]]21]
as.matrix(test)
sum(v)
length(test)
value <- rle(v)
value$lengths
"X" == v
sum(player == v)
sum("X" == v)
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
if(sum(player = v) >= 4) {
return(TRUE)
} else {
return(FALSE)
}
}
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3), rep("O", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c(rep("X", 3), rep("O", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c("O", rep("X", 3), "O"), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c("O", rep("X", 3), "O"), debug=TRUE))
stopifnot(four.in.a.row(player="X", v=c(rep("X", 4)), debug=TRUE))
stopifnot(four.in.a.row(player="O", v=c(rep("O", 4)), debug=TRUE))
stopifnot(four.in.a.row(player="X", v=c("O", rep("X", 4), "O"), debug=TRUE))
stopifnot(four.in.a.row(player="O", v=c("X", rep("O", 4), "X"), debug=TRUE))
player = "x"
player == v
player = "X"
player == v
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
if(sum(player == v) >= 4) {
return(TRUE)
} else {
return(FALSE)
}
}
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c(rep("X", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c(rep("X", 3), rep("O", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c(rep("X", 3), rep("O", 3)), debug=TRUE))
stopifnot(!four.in.a.row(player="X", v=c("O", rep("X", 3), "O"), debug=TRUE))
stopifnot(!four.in.a.row(player="O", v=c("O", rep("X", 3), "O"), debug=TRUE))
stopifnot(four.in.a.row(player="X", v=c(rep("X", 4)), debug=TRUE))
stopifnot(four.in.a.row(player="O", v=c(rep("O", 4)), debug=TRUE))
stopifnot(four.in.a.row(player="X", v=c("O", rep("X", 4), "O"), debug=TRUE))
stopifnot(four.in.a.row(player="O", v=c("X", rep("O", 4), "X"), debug=TRUE))
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E"
), nrow=6, ncol=7, byrow=TRUE)
dim(x)
dim(x)[1]
dim(x)[2]
n = (dim(x)[1])*(dim(x)[2])
n
all(x[1:10] == "E")
all(x[1:10] == "X")
all(x[1:42] == "X")
?all
x = matrix(data=c(
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","X",
"X","X","X","X","O","E","X"
), nrow=6, ncol=7, byrow=TRUE)
x[row(6) == col(1)]
r = 6
c = 1
x[row(r) == col(c)]
row(x) == col(x)
x[row(r) - col(c) == r - c]
x[row(x) - col(x) == r - c]
x[row(x) == col(x)]
x[row(r)]
x[row(x) == r]
row(x)
x[row(x) - col(x) == r - c]
x[row(x) + col(x) == r + c]
four.in.a.row(player="X", v=c(rep("X", 4)), debug=TRUE)
four.in.a.row(player="X", v=c(rep("X", 4)), debug=TRUE) == TRUE
four.in.a.row(player="X", v=c(rep("X", 4)), debug=TRUE) == FALSE
won = function(player, board, r, c, debug=FALSE) {
if (debug) {
cat(sep="", "won(player=", player, ", board=\n")
print(board)
cat(sep="", ", r=", r, ", c=", c, ")\n")
}
if(four.in.a.row(player, v = x[row(x) == r]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[col(x) == c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[row(x) - col(x) == r - c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[row(x) + col(x) == r + c]) == TRUE) {
return(TRUE)
} else {
return(FALSE)
}
}
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot(!won(player="X", board=x, r=1, c=1, debug=TRUE))
stopifnot(!won(player="O", board=x, r=1, c=1, debug=TRUE))
stopifnot(!won(player="X", board=x, r=2, c=3, debug=TRUE))
stopifnot(!won(player="O", board=x, r=2, c=3, debug=TRUE))
x = matrix(data=c(
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","O",
"E","E","E","E","E","E","X",
"X","X","X","X","O","E","X"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=x, r=6, c=1, debug=TRUE))
stopifnot(!won(player="O", board=x, r=6, c=1, debug=TRUE))
stopifnot(!won(player="X", board=x, r=1, c=7, debug=TRUE))
stopifnot( won(player="O", board=x, r=1, c=7, debug=TRUE))
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","X","O","E","E","E",
"E","E","O","X","O","E","E",
"E","E","X","X","X","O","E",
"E","E","O","X","O","X","O",
"E","E","X","O","X","X","O"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=x, r=2, c=3, debug=TRUE))
stopifnot(!won(player="O", board=x, r=2, c=3, debug=TRUE))
stopifnot(!won(player="X", board=x, r=2, c=4, debug=TRUE))
stopifnot( won(player="O", board=x, r=2, c=4, debug=TRUE))
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","X","O","E","E",
"E","E","X","O","X","E","E",
"E","X","O","X","O","E","E",
"X","O","O","O","X","E","E",
"X","O","X","X","O","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=x, r=5, c=1, debug=TRUE))
stopifnot(!won(player="O", board=x, r=5, c=1, debug=TRUE))
stopifnot( won(player="X", board=x, r=4, c=2, debug=TRUE))
stopifnot(!won(player="O", board=x, r=4, c=2, debug=TRUE))
stopifnot(!won(player="X", board=x, r=2, c=5, debug=TRUE))
stopifnot( won(player="O", board=x, r=2, c=5, debug=TRUE))
stopifnot(4 == largest.empty.row(board=x, col=1, debug=TRUE))
stopifnot(3 == largest.empty.row(board=x, col=2, debug=TRUE))
stopifnot(2 == largest.empty.row(board=x, col=3, debug=TRUE))
stopifnot(1 == largest.empty.row(board=x, col=4, debug=TRUE))
stopifnot(1 == largest.empty.row(board=x, col=5, debug=TRUE))
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E",
"E","E","E","E","E","E","E"
), nrow=6, ncol=7, byrow=TRUE)
won(player="X", board=x, r=1, c=1, debug=TRUE)
!won(player="X", board=x, r=1, c=1, debug=TRUE)
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","X","O","E","E",
"E","E","X","O","X","E","E",
"E","X","O","X","O","E","E",
"X","O","O","O","X","E","E",
"X","O","X","X","O","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot( won(player="X", board=x, r=5, c=1, debug=TRUE))
stopifnot(!won(player="O", board=x, r=5, c=1, debug=TRUE))
stopifnot( won(player="X", board=x, r=4, c=2, debug=TRUE))
stopifnot(!won(player="O", board=x, r=4, c=2, debug=TRUE))
stopifnot(!won(player="X", board=x, r=2, c=5, debug=TRUE))
stopifnot( won(player="O", board=x, r=2, c=5, debug=TRUE))
x
max(x["E",1])
which(x == "E")
max(x[x == "E",1])
x[x == "E",1]
x[x == "E"]
x[,1]
x[,1] == "E"
[x[,1] == "E"]
x[x[,1] == "E"]
sum(x[,1] == "E")
which(x[,1] == "E")
which(x[,2] == "E")
which(x[,3] == "E")
which(x[,4] == "E")
which(x == "E")
x[,which(x == "E")]
x[which(x == "E"),1]
x[which(x == "E")]
which(x[1] == "E")
which(x[2] == "E")
which(x[,1] == "E")
which(x[,2] == "E")
x[,1]
"E" %in% x[,1]
which("E" %in% x[,1])
which(x[,1] %in% "E")
which(x[,2] %in% "E")
x[,2] %in% "E"
which(x[,2] == "E")
max(which(x[,2] == "E"))
x
dim(x)[2]
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
for(i in 1:dim(x)[2]) {
empty = max(which(x[,i] == "E"))
}
return(empty)
}
stopifnot(4 == largest.empty.row(board=x, col=1, debug=TRUE))
x = matrix(data=c(
"E","E","E","E","E","E","E",
"E","E","E","X","O","E","E",
"E","E","X","O","X","E","E",
"E","X","O","X","O","E","E",
"X","O","O","O","X","E","E",
"X","O","X","X","O","E","E"
), nrow=6, ncol=7, byrow=TRUE)
stopifnot(4 == largest.empty.row(board=x, col=1, debug=TRUE))
empty = max(which(x[,1] == "E"))
empty
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(x[col] == "E"))
return(empty)
}
stopifnot(4 == largest.empty.row(board=x, col=1, debug=TRUE))
epty
empty
str(empty)
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(x[,col] == "E"))
return(empty)
}
stopifnot(4 == largest.empty.row(board=x, col=1, debug=TRUE))
stopifnot(3 == largest.empty.row(board=x, col=2, debug=TRUE))
stopifnot(2 == largest.empty.row(board=x, col=3, debug=TRUE))
stopifnot(1 == largest.empty.row(board=x, col=4, debug=TRUE))
stopifnot(1 == largest.empty.row(board=x, col=5, debug=TRUE))
stopifnot(6 == largest.empty.row(board=x, col=6, debug=TRUE))
stopifnot(6 == largest.empty.row(board=x, col=7, debug=TRUE))
rm(list = ls())
setwd("~/Git/STAT327/Section2/hw3")
source("hw3test.R")
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
if(sum(player == v) >= 4) {
return(TRUE)
} else {
return(FALSE)
}
}
won = function(player, board, r, c, debug=FALSE) {
if (debug) {
cat(sep="", "won(player=", player, ", board=\n")
print(board)
cat(sep="", ", r=", r, ", c=", c, ")\n")
}
if(four.in.a.row(player, v = x[row(x) == r]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[col(x) == c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[row(x) - col(x) == r - c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[row(x) + col(x) == r + c]) == TRUE) {
return(TRUE)
} else {
return(FALSE)
}
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(x[,col] == "E"))
return(empty)
}
source("hw3test.R")
