anova(samara.slope.int, samara.fit)
samra.slope.int <- lm(y ~ x2 + x3 + x4, data = samara)
samra.slope.int <- lm(y ~ x2 + x3 + x4, data = samara)
anova(samara.slope.int, samara.fit)
samara.slope.int <- lm(y ~ x2 + x3 + x4, data = samara)
anova(samara.slope.int, samara.fit)
samara.int <- lm(y ~ x2 + x3, data = samara)
anova(samara.int, samara.fit)
samara.slope <- lm(y ~ x4 + x5, data = samara)
anova(samara.slope, samara.fit)
library(ggplot2)
library(gridExtra)
library(plotly)
setwd("~/Git/STAT572/Homework6")
library(car)
setwd("~/Git/STAT572/Homework6")
library(leaps)
trans <- read.table("trans.txt", header = TRUE)
par(mfrow = c(1, 3))
plot(x = trans$forage, y = trans$time, main = "Forage vs Time")
plot(x = trans$weight, y = trans$time, main = "Percent of Intake that is Forage vs Time")
# Loading data
trans <- read.table("trans.txt", header = TRUE)
# Looking at data first
par(mfrow = c(1, 3))
plot(x = trans$forage, y = trans$time, main = "Forage vs Time")
plot(x = trans$grain, y = trans$time, main = "Grain vs Time")
plot(x = trans$weight, y = trans$time, main = "Percent of Intake that is Forage vs Time")
layout(1)
# Initial regression
trans.fit.full <- lm(time ~ forage + grain + weight, data = trans)
summary(trans.fit.full)
plot(trans.fit.full, which = 1)
# Box Cox to see if tranformation is necessary
boxcox(time ~ forage + grain + weight, data = trans)
# Loading data
trans <- read.table("trans.txt", header = TRUE)
# Looking at data first
par(mfrow = c(1, 3))
plot(x = trans$forage, y = trans$time, main = "Forage vs Time")
plot(x = trans$grain, y = trans$time, main = "Grain vs Time")
plot(x = trans$weight, y = trans$time, main = "Percent of Intake that is Forage vs Time")
layout(1)
# Initial regression
trans.fit.full <- lm(time ~ forage + grain + weight, data = trans)
summary(trans.fit.full)
plot(trans.fit.full, which = 1)
# Box Cox to see if tranformation is necessary
#boxcox(time ~ forage + grain + weight, data = trans)
# Stepwise model selection - doing both forward and backward using BIc to be conservative since the data doesn't seem to be perfectly linear
trans.null <- lm(time ~ 1, data = trans)
step(trans.null, scope = list(lower = trans.null, upper = trans.fit.full), direction = "both", k = log(length(trans$time)))
step(trans.null, scope = list(lower = trans.fit.full, upper = trans.null), direction = "both", k = log(length(trans$time)))
step(trans.null, scope = list(lower = trans.null, upper = trans.fit.full), direction = "forward", k = log(length(trans$time)))
step(trans.fit.full, scope = list(lower = trans.null, upper = trans.fit.full), direction = "backward", k = log(length(trans$time)))
# USing regsubsets to comfirm above resutls
trans.sub <- regsubsets(time ~ forage + grain + weight, data = trans, nbest = 4)
plot(trans.sub, scale = "bic")
rm(list = ls())
four.in.a.row = function(player, v, debug=FALSE) {
if (debug) {
cat(sep="", "four.in.a.row(player=", player, ", v=", v, ")\n")
}
if(sum(player == v) >= 4) {
return(TRUE)
} else {
return(FALSE)
}
}
won = function(player, board, r, c, debug=FALSE) {
if (debug) {
cat(sep="", "won(player=", player, ", board=\n")
print(board)
cat(sep="", ", r=", r, ", c=", c, ")\n")
}
if(four.in.a.row(player, v = x[row(x) == r]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[col(x) == c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[row(x) - col(x) == r - c]) == TRUE) {
return(TRUE)
} else if (four.in.a.row(player, v = x[row(x) + col(x) == r + c]) == TRUE) {
return(TRUE)
} else {
return(FALSE)
}
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(x[,col] == "E"))
return(empty)
}
source("hw3test.R") # Run tests on the functions above.
setwd("~/Git/STAT327/Section2/hw3")
source("hw3test.R") # Run tests on the functions above.
rm(list=ls()) # clear all defined objects
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
plot(x, y, type="n", xlim=c(0, 4), ylim=c(4, 0))
segments(x0=c(0.5, 0.5, 1.5, 2.5), y0=c(1.5, 2.5, 0.5, 0.5),
x1=c(3.5, 3.5, 1.5, 2.5), y1=c(1.5, 2.5, 3.5, 3.5))
x = rep(1:7, each = 3)
y = rep(1:6, times = 3)
plot(x, y, type="n", xlim=c(0, 4), ylim=c(4, 0))
y = rep(1:7, times = 3)
plot(x, y, type="n", xlim=c(0, 4), ylim=c(4, 0))
segments(x0=c(0.5, 0.5, 1.5, 2.5), y0=c(1.5, 2.5, 0.5, 0.5),
x1=c(3.5, 3.5, 1.5, 2.5), y1=c(1.5, 2.5, 3.5, 3.5))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(7, 0))
segments(x0=c(0.5, 0.5, 1.5, 2.5), y0=c(1.5, 2.5, 0.5, 0.5),
x1=c(3.5, 3.5, 1.5, 2.5), y1=c(1.5, 2.5, 3.5, 3.5))
?segments
plot(x, y, type="n", xlim=c(0, 7), ylim=c(7, 0))
segments(x0=c(0.5, 1.5, 1.5, 2.5), y0=c(1.5, 2.5, 0.5, 0.5),
x1=c(3.5, 3.5, 1.5, 2.5), y1=c(1.5, 2.5, 3.5, 3.5))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(7, 0))
segments(x0=c(0.5, 0.5, 1.5, 2.5), y0=c(1.5, 2.5, 0.5, 0.5),
x1=c(3.5, 3.5, 1.5, 2.5), y1=c(1.5, 2.5, 3.5, 3.5))
?rep
x
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
x
plot(x, y, type="n", xlim=c(0, 7), ylim=c(7, 0))
plot(x, y, type="n", xlim=c(0, 6), ylim=c(7, 0))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = 0, y0 =6, x1 = 7, y1 = 6)
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
?rep
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0,0,0,0,0,0) , y0 = c(6,5,4,3,2,1,0) , x1 = c(7,7,7,7,7,7), y1 = c(6,5,4,3,2,1,0))
segments(x0 = c(0,1,2,3,4,5,6,7), y0 = c(0,0,0,0,0,0,0), x1 = c(0,1,2,3,4,5,6,7), y1 = c(6,6,6,6,6,6,6))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7, 7, 7, 7, 7, 7, 0, 1, 2, 3, 4, 5, 6, 7),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 6, 6, 6, 6, 6, 6))
segments(x0 = 0, y0 = 0, x1 = 0, y2 = 6)
segments(x0 = 0, y0 = 0, x1 = 0, y1 = 6)
segments(x0 = 0,0 , y0 = 0,0, x1 = 0,7, y1 = 6,0)
segments(x0 = c(0,0), y0 = c(0,0), x1 = c(0,7), y1 = c(6,0))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7, 7, 7, 7, 7, 7, 0, 1, 2, 3, 4, 5, 6, 7),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 6, 6, 6, 6, 6, 6))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7, 7, 7, 7, 7, 7, 0, 1, 2, 3, 4, 5, 6, 7),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 6, 6, 6, 6, 6, 6))
segments(x0 = c(0,0), y0 = c(0,0), x1 = c(0,7), y1 = c(6,0))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 2, 3, 4, 5, 6, 7),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
cat(sep="", "i=", i, ", player=", player, "\n")
# ... player takes a turn ...
player = ifelse(test=(player == "X"), yes="O", no="X")
}
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
row = y[index]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 2, 3, 4, 5, 6, 7),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
plot(x, y, xlim=c(0, 4), ylim=c(4, 0))
segments(x0=c(0.5, 0.5, 1.5, 2.5), y0=c(1.5, 2.5, 0.5, 0.5),
x1=c(3.5, 3.5, 1.5, 2.5), y1=c(1.5, 2.5, 3.5, 3.5))
plot(x, y, type="n", xlim=c(0, 7), ylim=c(6, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
plot(x, y, type="n", xlim=c(0, 7.5), ylim=c(6, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
plot(x, y, type="n", xlim=c(0, 8), ylim=c(6, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
?ifelse
rm(list=ls())
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(6, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6, 5, 4, 3, 2, 1, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
cat(sep="", "i=", i, ", player=", player, "\n")
player = ifelse(test=(player == "X"), yes="O", no="X")
}
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
row = y[index]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
rm(list=ls())
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
row = y[index]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
rm(list=ls())
x = rep(1:3, each = 3)
y = rep(1:3, times = 3)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
row = y[index]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
rm(list=ls())
x = rep(1:3, each = 7)
y = rep(1:3, times = 6)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
x = rep(1:3, each = 7)
y = rep(1:3, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
row = y[index]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
x = rep(1:7, each = 7)
y = rep(1:6, times = 7)
x = rep(1:7, each = 6)
y = rep(1:6, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
row = y[index]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
index = identify(x, y, n=1)
index
index = identify(x, y, n=1)
index
y[index]
y[index]
x[index]
index = identify(x, y, n=1)
col = x[index]
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(board[,col] == "E"))
return(empty)
}
row = y[empty]
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(x[,col] == "E"))
return(empty)
}
index = identify(x, y, n=1)
index
col = x[index]
empty = largest.empty.row(board, col)
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(board[,col] == "E"))
return(empty)
}
empty = largest.empty.row(board, col)
max(which(board[,col] == "E")
)
board[, col]
rm(list=ls())
x = rep(1:7, each = 6)
y = rep(1:6, times = 7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(board[,col] == "E"))
return(empty)
}
empty = largest.empty.row(board, col)
empty
row = y[empty]
board[row, col] = player
player = "X"
board[row, col] = player
View(board)
board = matrix(data=rep("E", times=42), nrow=6, ncol=7)
plot(x, y, type="n", xlim=c(0, 8), ylim=c(7, 0))
segments(x0 = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y0 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
x1 = c(7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5),
y1 = c(6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5, 6.5, 0.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5))
player = "X"
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
# empty = largest.empty.row(board, col)
row = y[largest.empty.row(board, col)]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
largest.empty.row(board, 3)
max(which(board[,3] == "E"))
test <- max(which(board[,3] == "E"))
test
if(empty <= 6) {
return(empty)
} else {
return(NULL)
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
empty = max(which(board[,col] == "E"))
if(empty <= 6) {
return(empty)
} else {
return(NULL)
}
}
largest.empty.row(board, 3)
?any
any(board[,3] == "E")
any(board[,2] == "E")
!any(board[,3] == "E")
?while
)
cat(sep = "", "This column is full, please pick an empty column.", "\n")
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
while(!any(board[,col] == "E")) {
cat(sep = "", "This column is full, please pick an empty column.", "\n")
index = identify(x, y, n=1)
}
source("hw3test.R") # Run tests on the functions above.
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
largest.empty.row = function(board, col, debug=FALSE) {
if (debug) {
cat(sep="", "largest.empty.row(board=\n")
print(board)
cat(sep="", ", col=", col, ")\n")
}
while(!any(board[,col] == "E")) {
cat(sep = "", "This column is full, please pick an empty column.", "\n")
index = identify(x, y, n=1)
col = x[index]
}
return(max(which(x[,col] == "E")))
}
for (i in 1:42) {
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
row = y[empty]
board[row, col] = player
text(x=col, y=row, labels=player)
cat(sep="", "i=", i, ", player=", player, ", index=", index,
", row=", row, ", col=", col, ", board:", "\n")
print(board)
player = ifelse(test=(player == "X"), yes="O", no="X")
}
index = identify(x, y, n=1)
col = x[index]
empty = largest.empty.row(board, col)
