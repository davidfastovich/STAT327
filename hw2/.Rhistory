setwd("~/GitHub/STAT327/Quiz4")
setwd("~/Git/STAT327/Quiz4")
m <- mtcars
table(m$gear, m$cyl)
test <- read.csv("fastovichQ4.csv")
mean(test$age[test$sex == "F"])
mean(test$age[test$sex == "M" & test$eye.color == "brown"])
sum(test$hair.color == "black" | test$hair.color == "blond" | test$hair.color == "brown")
sum(test$eye.color == "hazel" & !test$hair.color == "gray")
sorted <- test[order(test$weight, decreasing = TRUE),]
sorted[3,]
test$neg.weight <- test$weight*(-1)
sorted <- test[order(test$eye.color, test$neg.weight, decreasing = TRUE), ]
sorted
summary(CO2)
head(CO2)
CO2$conc[1]
CO2$conc[1] + CO2$uptake[1]
mean(CO2$conc & CO2$uptake)
sum(CO2$conc + CO2$uptake)
CO2
38825.9/(84*2)
mean(CO2$uptake[CO2$Type == "Quebec"])
sd(CO2$uptake[CO2$Type == "Quebec"])
mean(CO2$uptake[CO2$Type == "Mississippi"])
sd(CO2$uptake[CO2$Type == "Mississippi"])
boxplot(CO2)
boxplot(CO2$uptake ~ CO2$Type)
boxplot(CO2$Type ~ CO2$uptake)
test <- read.csv("fastovichQ4.csv")
mean(test$age[test$sex == "F"])
mean(test$age[test$sex == "M" & test$eye.color == "brown"])
sum(test$hair.color == "black" | test$hair.color == "blond" | test$hair.color == "brown")
sum(test$eye.color == "hazel" & !test$hair.color == "gray")
sorted <- test[order(test$weight, decreasing = TRUE),]
sorted[3,]
test$neg.weight <- test$weight*(-1)
sorted <- test[order(test$eye.color, test$neg.weight, decreasing = TRUE), ]
sorted
mean(CO2$uptake)
rm(list = ls())
setwd("~/Git/STAT327/hw2")
source(hw2.R)
source("hw2.R")
?points
boxplot(mpg ~ gears, data = mtcars)
?mtcars
boxplot(mpg ~ gear, data = mtcars)
?iris
boxplot(Petal.Length ~ Species, data = iris)
hist(iris$Petal.Length, seq(0, 7, 1))
hist(iris$Petal.Length, freq = FALSE)
density(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
hist(iris$Petal.Length, freq = FALSE)
plot(density(iris$Petal.Length))
2459305 + 8254127
10713432
?airquality
str(airquality)
head(airquality)
plot(x = airquality$Day, y = airquality$Ozone)
plot(x = airquality$Day, y = airquality$Ozone)
barplot(x = airquality$Day, y = airquality$Ozone)
barplot(x = airquality$Day, y = airquality$Ozone)
barplot(x = Day, y = Ozone, data = airquality)
plot(x = Day, y = Ozone, data = airquality)
?barplot
?airquality
barplot(x = airquality$Day, y = airquality$Ozone)
plot(x = airquality$Day, y = airquality$Ozone)
plot(airquality$Day~airquality$Ozone)
plot(airquality$Ozone~airquality$Day)
plot(x = length(airquality$Day), y = airquality$Ozone)
length(airquality)
length(airquality[,1])
plot(x = length(airquality[,1]), y = airquality$Ozone)
length(airquality$Ozone)
plot(x = length(airquality[,5]), y = airquality$Ozone)
plot(x = length(airquality[,6]), y = airquality$Ozone)
plot(x = length(airquality[,6]), y = airquality[,1])
head(airquality)
pairs(airquality)
air <- airquality
air$Month <- (air$Month, labels = c("May", "June", "July", "August", "September"))
air$Month <- (air$Month, labels = c("May", "June", "July", "August", "September"))
air$Month <- factor(air$Month, labels = c("May", "June", "July", "August", "September"))
plot(air$Temp ~ air$Month)
fit <- lm(Ozone ~ Solar.R + Wind + Temp, data = air)
plot(fit)
plot(fit)
plot(fit, which = 1)
?density
?binom
?dbinom
dbinom(30, 100, .3)
hist(rbinom(30, 100, .3))
plot(rbinom(30, 100, .3))
plot(density(rbinom(30, 100, .3)))
plot(density(rnorn(30, 21)
)
)
plot(density(rnorn(30, 21)))
plot(density(rnorm(30, 21)))
?rnorm
plot(density(rnorm(100, 30, 21)))
plot(density(rnorm(1000, 30, 21)))
plot(density(rnorm(10000, 30, 21)))
pairs(iris)
demo(plotmath)
barplot(chickwts)
head(chickwts)
counts <- table(chickwts)
counts
barplot(counts)
chickwts
hist(iris$Petal.Length, seq(0, 7))
boxplot(mpg ~ gear, data = mtcars)
(summary(fit.ln.a.niger))
a.niger <- data.frame(x = c(.32, .40, .51, .64, .80, 1.0, 1.3, 1.6, 2.0, 2.5, 3.2, 4.0),
y = c(2.0, 2.3, 2.4, 2.8, 3.0, 3.3, 3.6, 4.3, 4.8, 5.1, 5.6, 6.6))
ln.a.niger <- log(a.niger) #ln tranforming x and y
fit.ln.a.niger <- lm(y~x, data = ln.a.niger)
(summary(fit.ln.a.niger))
m <- matrix(data = c(1, 2, 3, 3), nrow = 2, ncol = 2, byrow = TRUE)
layout(m)
plot(ln.a.niger, main = "Scatterplot of Aspergillus Niger",
xlab = "ln Concentration of Toxicant",
ylab = "ln Growth Rate Changes") #Linearity assumption
plot(fit.ln.a.niger, which = 1) #Equal variance assumption
qqnorm(x = ln.a.niger$x, y = ln.a.niger$y) #Normality
layout(1)
m <- matrix(data = c(1, 2, 3), nrow = 2, ncol = 2, byrow = TRUE)
layout(m)
plot(ln.a.niger, main = "Scatterplot of Aspergillus Niger",
xlab = "ln Concentration of Toxicant",
ylab = "ln Growth Rate Changes") #Linearity assumption
plot(fit.ln.a.niger, which = 1) #Equal variance assumption
qqnorm(x = ln.a.niger$x, y = ln.a.niger$y) #Normality
m <- matrix(data = c(1, 2, 3, 3), nrow = 2, ncol = 2, byrow = TRUE)
layout(m)
plot(ln.a.niger, main = "Scatterplot of Aspergillus Niger",
xlab = "ln Concentration of Toxicant",
ylab = "ln Growth Rate Changes") #Linearity assumption
plot(fit.ln.a.niger, which = 1) #Equal variance assumption
qqnorm(x = ln.a.niger$x, y = ln.a.niger$y) #Normality
layout(1)
par(mfrow = c(2, 2))
plot(ln.a.niger, main = "Scatterplot of Aspergillus Niger",
xlab = "ln Concentration of Toxicant",
ylab = "ln Growth Rate Changes") #Linearity assumption
plot(fit.ln.a.niger, which = 1) #Equal variance assumption
qqnorm(x = ln.a.niger$x, y = ln.a.niger$y) #Normality
ypred.1 <- predict(fit.ln.a.niger)
resid <- residuals(fit.ln.a.niger) #Raw residuals
resid
plot(fit.ln.a.niger, which = 1) #Raw residuals plotted
rstand <- rstandard(fit.ln.a.niger) #Studentized residuals
rstand
plot(x = ypred.1, y = rstand,
main = "Internally Studenized Residuals",
ylab = "Internally studentized residuals",
xlab = "Predicted values")
abline(h = 0, lty = 2)
rstud <- rstudent(fit.ln.a.niger)
rstud
plot(x = ypred.1, y = rstud,
main = "Externally Studenized Residuals",
ylab = "Externally studentized residuals",
xlab = "Predicted values")
abline(h = 0, lty = 2)
layout(1)
ypred.1 <- predict(fit.ln.a.niger)
resid <- residuals(fit.ln.a.niger) #Raw residuals
resid
plot(fit.ln.a.niger, which = 1) #Raw residuals plotted
rstand <- rstandard(fit.ln.a.niger) #Studentized residuals
rstand
plot(x = ypred.1, y = rstand,
main = "Internally Studenized Residuals",
ylab = "Internally studentized residuals",
xlab = "Predicted values")
abline(h = 0, lty = 2)
rstud <- rstudent(fit.ln.a.niger)
rstud
plot(x = ypred.1, y = rstud,
main = "Externally Studenized Residuals",
ylab = "Externally studentized residuals",
xlab = "Predicted values")
abline(h = 0, lty = 2)
cor(ln.a.niger, method = "pearson")
#i
cor(ln.a.niger, method = "pearson")
#ii
cor(ln.a.niger$x, ypred.1, method = "pearson")
#iii
cor(ln.a.niger$y, ypred.1, method = "pearson")
#iv
cor(ypred.1, resid, method = "pearson")
#v
cor(ypred.1, rstud, method = "pearson")
cor(ln.a.niger$x, ypred.1, method = "pearson")
fit <- lm(y ~ x, data = a.niger)
durbinWatsonTest(fit, alternative = "positive")
# E =======================================================================
durbinWatsonTest(fit.ln.a.niger, alternative = "positive")
library(car)
fit <- lm(y ~ x, data = a.niger)
durbinWatsonTest(fit, alternative = "positive")
# E =======================================================================
durbinWatsonTest(fit.ln.a.niger, alternative = "positive")
plot(crown)
sq.crown <- data.frame(x = crown$x,
y = sqrt(crown$y))
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "sqrt(Crown Diameter)") #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
crown <- data.frame(x = c(530, 630, 840, 900, 1020, 1020, 1370, 1440, 1760, 2210, 2400, 2400, 2810, 3140, 3360),
y = c(2.8, 3.3, 3.7, 3.7, 4.1, 3.9, 5.1, 5.7, 7.2, 8.0, 9.0, 9.6, 10.5, 12.4, 14.6))
plot(crown)
sq.crown <- data.frame(x = crown$x,
y = sqrt(crown$y))
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "sqrt(Crown Diameter)") #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
sq.crown <- data.frame(x = crown$x,
y = sqrt(crown$y))
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt(Crown Diameter))") #Linearity
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt(Crown Diameter)) #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
# B =======================================================================
#CI for slope
confint(sq.fit, "x", level = 0.90)
#CI for intercept
confint(sq.fit, "(Intercept)", level = 0.90)
# C =======================================================================
to.predict <- data.frame(x = 1900) #Value to predict
pred.1900 <- predict(sq.fit, to.predict)
pred.1900^2 #Gives you correct value since y was squared
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt(Crown Diameter)) #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
# B =======================================================================
#CI for slope
confint(sq.fit, "x", level = 0.90)
#CI for intercept
confint(sq.fit, "(Intercept)", level = 0.90)
# C =======================================================================
to.predict <- data.frame(x = 1900) #Value to predict
pred.1900 <- predict(sq.fit, to.predict)
pred.1900^2 #Gives you correct value since y was squared
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt(Crown Diameter))) #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
# B =======================================================================
#CI for slope
confint(sq.fit, "x", level = 0.90)
#CI for intercept
confint(sq.fit, "(Intercept)", level = 0.90)
# C =======================================================================
to.predict <- data.frame(x = 1900) #Value to predict
pred.1900 <- predict(sq.fit, to.predict)
pred.1900^2 #Gives you correct value since y was squared
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt{Crown Diameter})) #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
# B =======================================================================
#CI for slope
confint(sq.fit, "x", level = 0.90)
#CI for intercept
confint(sq.fit, "(Intercept)", level = 0.90)
# C =======================================================================
to.predict <- data.frame(x = 1900) #Value to predict
pred.1900 <- predict(sq.fit, to.predict)
pred.1900^2 #Gives you correct value since y was squared
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt{Crown Diameter})) #Linearity
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(sqrt{Crown Diameter})) #Linearity
)
d
d
asdfadsf
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(sqrt{Crown Diameter}))) #Linearity
cd
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(sqrt{Crown Diameter})))) #Linearity
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "expression(\sqrt{Crown Diameter})) #Linearity
plot(crown)
sq.crown <- data.frame(x = crown$x,
y = sqrt(crown$y))
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "sqrt(Crown Diameter)") #Linearity
sq.fit <- lm(y ~ x, data = sq.crown)
summary(sq.fit)
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
durbinWatsonTest(sq.fit, alternative = "positive") #Independence
par(mfrow = c(2, 2))
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "sqrt(Crown Diameter)") #Linearity
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
par(mfrow = c(2, 2))
plot(crown, main = "Untransformed Crown Data", ylab = "Crown Diameter", xlab = "Stem Area")
plot(sq.crown, main = "Crown Diameter", xlab = "Stem Area", ylab = "sqrt(Crown Diameter)") #Linearity
plot(sq.fit, which = 1) #Equal variance
qqnorm(x = sq.crown$x, y  = sq.crown$y) #Normality
par(mfrow = c(2, 2))
plot(a.niger, main = "Untransformed Data",
xlab = "Concentration of Toxicant",
ylab = "Growth Rate Changes")
plot(ln.a.niger, main = "Scatterplot of Aspergillus Niger",
xlab = "ln Concentration of Toxicant",
ylab = "ln Growth Rate Changes") #Linearity assumption
plot(fit.ln.a.niger, which = 1) #Equal variance assumption
qqnorm(x = ln.a.niger$x, y = ln.a.niger$y) #Normality
to.predict <- data.frame(x = 1900) #Value to predict
pred.1900 <- predict(sq.fit, to.predict)
pred.1900^2 #Gives you correct value since y was square
to.predict <- data.frame(x = 1900) #Value to predict
pred.1900 <- predict(sq.fit, to.predict)
pred.1900^2 #Gives you correct value since y was squared
(predict(sq.fit, to.predict))^2
View(to.predict)
pred.1900 <- predict(sq.fit, to.predict$x)
species.a <- (4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81)
species.a <- c(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81)
rm(list = ls())
species.a <- c(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81)
?t.test
t.test(species.a, species.b, var.equal = TRUE, conf.level = .95)
t.test(species.a, species.b, var.equal = TRUE, conf.level = .95)
species.b <- c(4.32, 4.48, 5.05, 3.27, 4.23, 4.41, 4.77, 3.75, 3.90)
t.test(species.a, species.b, var.equal = TRUE, conf.level = .95)
test <- t.test(species.a, species.b, var.equal = TRUE, conf.level = .95)
confint(test, level = 0.95)
?confint
test <- t.test(species.a, species.b, var.equal = TRUE)
test
confint(test)
q.4 <- data.frame(x = c(0, 0, 0, 0, 0, 0, 0, 0, 0),
y = c(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81, 4.32, 4.48, 5.05, 3.27, 4.23, 4.41, 4.77, 3.75, 3.90))
View(q.4)
q.4 <- data.frame(x = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1),
y = c(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81, 4.32, 4.48, 5.05, 3.27, 4.23, 4.41, 4.77, 3.75, 3.90))
View(q.4)
lm(y ~ x, data = q.4)
fit.4 <- lm(y ~ x, data = q.4)
plot(fit.4)
summary(fit.4)
test <- t.test(species.a, species.b, var.equal = TRUE, conf.level = .95)
test
mean(species.a $ species.b)
mean(species.a & species.b)
mean(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81, 4.32, 4.48, 5.05, 3.27, 4.23, 4.41, 4.77, 3.75, 3.90)
mean(4.32, 4.48, 5.05, 3.27, 4.23, 4.41, 4.77, 3.75, 3.90)
mean(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81)
mean(c(4.25, 4.87, 5.13, 4.85, 3.95, 5.09, 4.36, 5.57, 4.81, 4.32, 4.48, 5.05, 3.27, 4.23, 4.41, 4.77, 3.75, 3.90))
sd(fit.4)
summary(fit.4)
anova(fit.4)
t.test(species.a, species.b, var.equal = TRUE, conf.level = .95)
coef(fit.4)
shows mean(q.4$x)
mean(q.4$x)
anova(fit.4)
